//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sacmaumvc.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class sacmaumvcEntities : DbContext
    {
        public sacmaumvcEntities()
            : base("name=sacmaumvcEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddressBook> AddressBooks { get; set; }
        public virtual DbSet<AddressBook1> AddressBook1 { get; set; }
        public virtual DbSet<AdsBanner> AdsBanners { get; set; }
        public virtual DbSet<AdsCategory> AdsCategories { get; set; }
        public virtual DbSet<Article> Articles { get; set; }
        public virtual DbSet<ArticleCategory> ArticleCategories { get; set; }
        public virtual DbSet<aspnet_Applications> aspnet_Applications { get; set; }
        public virtual DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public virtual DbSet<aspnet_Paths> aspnet_Paths { get; set; }
        public virtual DbSet<aspnet_PersonalizationAllUsers> aspnet_PersonalizationAllUsers { get; set; }
        public virtual DbSet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUser { get; set; }
        public virtual DbSet<aspnet_Profile> aspnet_Profile { get; set; }
        public virtual DbSet<aspnet_Roles> aspnet_Roles { get; set; }
        public virtual DbSet<aspnet_SchemaVersions> aspnet_SchemaVersions { get; set; }
        public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }
        public virtual DbSet<aspnet_WebEvent_Events> aspnet_WebEvent_Events { get; set; }
        public virtual DbSet<Career> Careers { get; set; }
        public virtual DbSet<CareerCategory> CareerCategories { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<DeliveryMethod> DeliveryMethods { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<Download> Downloads { get; set; }
        public virtual DbSet<DownloadCategory> DownloadCategories { get; set; }
        public virtual DbSet<Manufacturer> Manufacturers { get; set; }
        public virtual DbSet<Manufacturer1> Manufacturer1 { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MenuPosition> MenuPositions { get; set; }
        public virtual DbSet<Newsletter> Newsletters { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderStatu> OrderStatus { get; set; }
        public virtual DbSet<Origin> Origins { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }
        public virtual DbSet<PayStatu> PayStatus { get; set; }
        public virtual DbSet<PhotoAlbum> PhotoAlbums { get; set; }
        public virtual DbSet<PhotoAlbumCategory> PhotoAlbumCategories { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductDownload> ProductDownloads { get; set; }
        public virtual DbSet<ProductImage> ProductImages { get; set; }
        public virtual DbSet<ProductLength> ProductLengths { get; set; }
        public virtual DbSet<ProductOfSame> ProductOfSames { get; set; }
        public virtual DbSet<ProductOption> ProductOptions { get; set; }
        public virtual DbSet<ProductOptionCategory> ProductOptionCategories { get; set; }
        public virtual DbSet<ProductSizeColor> ProductSizeColors { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectCategory> ProjectCategories { get; set; }
        public virtual DbSet<ProjectDownload> ProjectDownloads { get; set; }
        public virtual DbSet<ProjectImage> ProjectImages { get; set; }
        public virtual DbSet<ProjectVideo> ProjectVideos { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServiceCategory> ServiceCategories { get; set; }
        public virtual DbSet<ShippingStatu> ShippingStatus { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<Video> Videos { get; set; }
        public virtual DbSet<VideoCategory> VideoCategories { get; set; }
        public virtual DbSet<Visitor> Visitors { get; set; }
        public virtual DbSet<WishList> WishLists { get; set; }
        public virtual DbSet<vw_aspnet_Applications> vw_aspnet_Applications { get; set; }
        public virtual DbSet<vw_aspnet_MembershipUsers> vw_aspnet_MembershipUsers { get; set; }
        public virtual DbSet<vw_aspnet_Profiles> vw_aspnet_Profiles { get; set; }
        public virtual DbSet<vw_aspnet_Roles> vw_aspnet_Roles { get; set; }
        public virtual DbSet<vw_aspnet_Users> vw_aspnet_Users { get; set; }
        public virtual DbSet<vw_aspnet_UsersInRoles> vw_aspnet_UsersInRoles { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_Paths> vw_aspnet_WebPartState_Paths { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_Shared> vw_aspnet_WebPartState_Shared { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_User> vw_aspnet_WebPartState_User { get; set; }
    
        [DbFunction("sacmaumvcEntities", "ufn_ChildArticleCategory_SelectAll")]
        public virtual IQueryable<ufn_ChildArticleCategory_SelectAll_Result> ufn_ChildArticleCategory_SelectAll(Nullable<int> rootArticleCategoryID)
        {
            var rootArticleCategoryIDParameter = rootArticleCategoryID.HasValue ?
                new ObjectParameter("RootArticleCategoryID", rootArticleCategoryID) :
                new ObjectParameter("RootArticleCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_ChildArticleCategory_SelectAll_Result>("[sacmaumvcEntities].[ufn_ChildArticleCategory_SelectAll](@RootArticleCategoryID)", rootArticleCategoryIDParameter);
        }
    
        [DbFunction("sacmaumvcEntities", "ufn_ChildCareerCategory_SelectAll")]
        public virtual IQueryable<ufn_ChildCareerCategory_SelectAll_Result> ufn_ChildCareerCategory_SelectAll(Nullable<int> rootCareerCategoryID)
        {
            var rootCareerCategoryIDParameter = rootCareerCategoryID.HasValue ?
                new ObjectParameter("RootCareerCategoryID", rootCareerCategoryID) :
                new ObjectParameter("RootCareerCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_ChildCareerCategory_SelectAll_Result>("[sacmaumvcEntities].[ufn_ChildCareerCategory_SelectAll](@RootCareerCategoryID)", rootCareerCategoryIDParameter);
        }
    
        [DbFunction("sacmaumvcEntities", "ufn_ChildProductCategory_SelectAll")]
        public virtual IQueryable<ufn_ChildProductCategory_SelectAll_Result> ufn_ChildProductCategory_SelectAll(Nullable<int> rootProductCategoryID)
        {
            var rootProductCategoryIDParameter = rootProductCategoryID.HasValue ?
                new ObjectParameter("RootProductCategoryID", rootProductCategoryID) :
                new ObjectParameter("RootProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_ChildProductCategory_SelectAll_Result>("[sacmaumvcEntities].[ufn_ChildProductCategory_SelectAll](@RootProductCategoryID)", rootProductCategoryIDParameter);
        }
    
        [DbFunction("sacmaumvcEntities", "ufn_ChildProductOptionCategory_SelectAll")]
        public virtual IQueryable<ufn_ChildProductOptionCategory_SelectAll_Result> ufn_ChildProductOptionCategory_SelectAll(Nullable<int> rootProductOptionCategoryID)
        {
            var rootProductOptionCategoryIDParameter = rootProductOptionCategoryID.HasValue ?
                new ObjectParameter("RootProductOptionCategoryID", rootProductOptionCategoryID) :
                new ObjectParameter("RootProductOptionCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_ChildProductOptionCategory_SelectAll_Result>("[sacmaumvcEntities].[ufn_ChildProductOptionCategory_SelectAll](@RootProductOptionCategoryID)", rootProductOptionCategoryIDParameter);
        }
    
        [DbFunction("sacmaumvcEntities", "ufn_ChildProjectCategory_SelectAll")]
        public virtual IQueryable<ufn_ChildProjectCategory_SelectAll_Result> ufn_ChildProjectCategory_SelectAll(Nullable<int> rootProjectCategoryID)
        {
            var rootProjectCategoryIDParameter = rootProjectCategoryID.HasValue ?
                new ObjectParameter("RootProjectCategoryID", rootProjectCategoryID) :
                new ObjectParameter("RootProjectCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_ChildProjectCategory_SelectAll_Result>("[sacmaumvcEntities].[ufn_ChildProjectCategory_SelectAll](@RootProjectCategoryID)", rootProjectCategoryIDParameter);
        }
    
        [DbFunction("sacmaumvcEntities", "ufn_ChildServiceCategory_SelectAll")]
        public virtual IQueryable<ufn_ChildServiceCategory_SelectAll_Result> ufn_ChildServiceCategory_SelectAll(Nullable<int> rootServiceCategoryID)
        {
            var rootServiceCategoryIDParameter = rootServiceCategoryID.HasValue ?
                new ObjectParameter("RootServiceCategoryID", rootServiceCategoryID) :
                new ObjectParameter("RootServiceCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_ChildServiceCategory_SelectAll_Result>("[sacmaumvcEntities].[ufn_ChildServiceCategory_SelectAll](@RootServiceCategoryID)", rootServiceCategoryIDParameter);
        }
    
        [DbFunction("sacmaumvcEntities", "ufn_RelatedProductCategory_SelectAll")]
        public virtual IQueryable<ufn_RelatedProductCategory_SelectAll_Result> ufn_RelatedProductCategory_SelectAll(Nullable<int> rootProductCategoryID)
        {
            var rootProductCategoryIDParameter = rootProductCategoryID.HasValue ?
                new ObjectParameter("RootProductCategoryID", rootProductCategoryID) :
                new ObjectParameter("RootProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_RelatedProductCategory_SelectAll_Result>("[sacmaumvcEntities].[ufn_RelatedProductCategory_SelectAll](@RootProductCategoryID)", rootProductCategoryIDParameter);
        }
    
        public virtual ObjectResult<string> aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordQuestionParameter = newPasswordQuestion != null ?
                new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
                new ObjectParameter("NewPasswordQuestion", typeof(string));
    
            var newPasswordAnswerParameter = newPasswordAnswer != null ?
                new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
                new ObjectParameter("NewPasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
        }
    
        public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
                new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
                new ObjectParameter("MinutesSinceLastInActive", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPassword_Result> aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword_Result>("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat_Result> aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat_Result>("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail(string applicationName, string email)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByName_Result> aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName_Result>("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByUserId_Result> aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId_Result>("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
        }
    
        public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
                new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
                new ObjectParameter("IsPasswordCorrect", typeof(bool));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
        }
    
        public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
        }
    
        public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_PersonalizationAdministration_DeleteAllState(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState", allUsersScopeParameter, applicationNameParameter, count);
        }
    
        public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetSharedState(ObjectParameter count, string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState", count, applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_SetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteProfiles(string applicationName, string userNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteProfiles", applicationNameParameter, userNamesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<aspnet_Profile_GetProperties_Result> aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties_Result>("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Profile_SetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var propertyNamesParameter = propertyNames != null ?
                new ObjectParameter("PropertyNames", propertyNames) :
                new ObjectParameter("PropertyNames", typeof(string));
    
            var propertyValuesStringParameter = propertyValuesString != null ?
                new ObjectParameter("PropertyValuesString", propertyValuesString) :
                new ObjectParameter("PropertyValuesString", typeof(string));
    
            var propertyValuesBinaryParameter = propertyValuesBinary != null ?
                new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
                new ObjectParameter("PropertyValuesBinary", typeof(byte[]));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Roles_GetAllRoles(string applicationName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles", applicationNameParameter);
        }
    
        public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
        }
    
        public virtual int aspnet_Setup_RestorePermissions(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles_Result> aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
        }
    
        public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParameter = eventId != null ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(string));
    
            var eventTimeUtcParameter = eventTimeUtc.HasValue ?
                new ObjectParameter("EventTimeUtc", eventTimeUtc) :
                new ObjectParameter("EventTimeUtc", typeof(System.DateTime));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventSequenceParameter = eventSequence.HasValue ?
                new ObjectParameter("EventSequence", eventSequence) :
                new ObjectParameter("EventSequence", typeof(decimal));
    
            var eventOccurrenceParameter = eventOccurrence.HasValue ?
                new ObjectParameter("EventOccurrence", eventOccurrence) :
                new ObjectParameter("EventOccurrence", typeof(decimal));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDetailCodeParameter = eventDetailCode.HasValue ?
                new ObjectParameter("EventDetailCode", eventDetailCode) :
                new ObjectParameter("EventDetailCode", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var applicationPathParameter = applicationPath != null ?
                new ObjectParameter("ApplicationPath", applicationPath) :
                new ObjectParameter("ApplicationPath", typeof(string));
    
            var applicationVirtualPathParameter = applicationVirtualPath != null ?
                new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
                new ObjectParameter("ApplicationVirtualPath", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
        }
    
        public virtual int usp_AddressBook_Delete(Nullable<int> addressBookID, ObjectParameter errorCode)
        {
            var addressBookIDParameter = addressBookID.HasValue ?
                new ObjectParameter("AddressBookID", addressBookID) :
                new ObjectParameter("AddressBookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook_Delete", addressBookIDParameter, errorCode);
        }
    
        public virtual int usp_AddressBook_Delete_ByUserName(string userName, ObjectParameter errorCode)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook_Delete_ByUserName", userNameParameter, errorCode);
        }
    
        public virtual int usp_AddressBook_Insert(string firstName, string lastName, string email, string homePhone, string cellPhone, string fax, string userName, string company, string address1, string address2, string zipCode, string city, Nullable<int> countryID, Nullable<int> provinceID, Nullable<int> districtID, Nullable<bool> isPrimary, Nullable<bool> isPrimaryBilling, Nullable<bool> isPrimaryShipping, string roleName, ObjectParameter errorCode)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isPrimaryBillingParameter = isPrimaryBilling.HasValue ?
                new ObjectParameter("IsPrimaryBilling", isPrimaryBilling) :
                new ObjectParameter("IsPrimaryBilling", typeof(bool));
    
            var isPrimaryShippingParameter = isPrimaryShipping.HasValue ?
                new ObjectParameter("IsPrimaryShipping", isPrimaryShipping) :
                new ObjectParameter("IsPrimaryShipping", typeof(bool));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook_Insert", firstNameParameter, lastNameParameter, emailParameter, homePhoneParameter, cellPhoneParameter, faxParameter, userNameParameter, companyParameter, address1Parameter, address2Parameter, zipCodeParameter, cityParameter, countryIDParameter, provinceIDParameter, districtIDParameter, isPrimaryParameter, isPrimaryBillingParameter, isPrimaryShippingParameter, roleNameParameter, errorCode);
        }
    
        public virtual int usp_AddressBook_Insert2(string firstName, string lastName, string email, string homePhone, string cellPhone, string fax, string userName, string company, string address1, string address2, string zipCode, string city, Nullable<int> countryID, Nullable<int> provinceID, Nullable<int> districtID, Nullable<bool> isPrimary, Nullable<bool> isPrimaryBilling, Nullable<bool> isPrimaryShipping, string roleName, string imageName, string convertedFirstName, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isPrimaryBillingParameter = isPrimaryBilling.HasValue ?
                new ObjectParameter("IsPrimaryBilling", isPrimaryBilling) :
                new ObjectParameter("IsPrimaryBilling", typeof(bool));
    
            var isPrimaryShippingParameter = isPrimaryShipping.HasValue ?
                new ObjectParameter("IsPrimaryShipping", isPrimaryShipping) :
                new ObjectParameter("IsPrimaryShipping", typeof(bool));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var convertedFirstNameParameter = convertedFirstName != null ?
                new ObjectParameter("ConvertedFirstName", convertedFirstName) :
                new ObjectParameter("ConvertedFirstName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook_Insert2", firstNameParameter, lastNameParameter, emailParameter, homePhoneParameter, cellPhoneParameter, faxParameter, userNameParameter, companyParameter, address1Parameter, address2Parameter, zipCodeParameter, cityParameter, countryIDParameter, provinceIDParameter, districtIDParameter, isPrimaryParameter, isPrimaryBillingParameter, isPrimaryShippingParameter, roleNameParameter, imageNameParameter, convertedFirstNameParameter, outImageName, errorCode);
        }
    
        public virtual int usp_AddressBook_SelectAll(Nullable<int> addressBookID, string firstName, string lastName, string email, string homePhone, string cellPhone, string fax, string userName, string company, string address1, string address2, string zipCode, string city, Nullable<int> countryID, Nullable<int> provinceID, Nullable<int> districtID, Nullable<bool> isPrimary, Nullable<bool> isPrimaryBilling, Nullable<bool> isPrimaryShipping, string roleName, ObjectParameter errorCode)
        {
            var addressBookIDParameter = addressBookID.HasValue ?
                new ObjectParameter("AddressBookID", addressBookID) :
                new ObjectParameter("AddressBookID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isPrimaryBillingParameter = isPrimaryBilling.HasValue ?
                new ObjectParameter("IsPrimaryBilling", isPrimaryBilling) :
                new ObjectParameter("IsPrimaryBilling", typeof(bool));
    
            var isPrimaryShippingParameter = isPrimaryShipping.HasValue ?
                new ObjectParameter("IsPrimaryShipping", isPrimaryShipping) :
                new ObjectParameter("IsPrimaryShipping", typeof(bool));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook_SelectAll", addressBookIDParameter, firstNameParameter, lastNameParameter, emailParameter, homePhoneParameter, cellPhoneParameter, faxParameter, userNameParameter, companyParameter, address1Parameter, address2Parameter, zipCodeParameter, cityParameter, countryIDParameter, provinceIDParameter, districtIDParameter, isPrimaryParameter, isPrimaryBillingParameter, isPrimaryShippingParameter, roleNameParameter, errorCode);
        }
    
        public virtual int usp_AddressBook_SelectAll2(Nullable<int> addressBookID, string firstName, string lastName, string email, string homePhone, string cellPhone, string fax, string userName, string company, string address1, string address2, string zipCode, string city, Nullable<int> countryID, Nullable<int> provinceID, Nullable<int> districtID, Nullable<bool> isPrimary, Nullable<bool> isPrimaryBilling, Nullable<bool> isPrimaryShipping, string roleName, ObjectParameter errorCode)
        {
            var addressBookIDParameter = addressBookID.HasValue ?
                new ObjectParameter("AddressBookID", addressBookID) :
                new ObjectParameter("AddressBookID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isPrimaryBillingParameter = isPrimaryBilling.HasValue ?
                new ObjectParameter("IsPrimaryBilling", isPrimaryBilling) :
                new ObjectParameter("IsPrimaryBilling", typeof(bool));
    
            var isPrimaryShippingParameter = isPrimaryShipping.HasValue ?
                new ObjectParameter("IsPrimaryShipping", isPrimaryShipping) :
                new ObjectParameter("IsPrimaryShipping", typeof(bool));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook_SelectAll2", addressBookIDParameter, firstNameParameter, lastNameParameter, emailParameter, homePhoneParameter, cellPhoneParameter, faxParameter, userNameParameter, companyParameter, address1Parameter, address2Parameter, zipCodeParameter, cityParameter, countryIDParameter, provinceIDParameter, districtIDParameter, isPrimaryParameter, isPrimaryBillingParameter, isPrimaryShippingParameter, roleNameParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_AddressBook_SelectOne_Result> usp_AddressBook_SelectOne(Nullable<int> addressBookID, ObjectParameter errorCode)
        {
            var addressBookIDParameter = addressBookID.HasValue ?
                new ObjectParameter("AddressBookID", addressBookID) :
                new ObjectParameter("AddressBookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AddressBook_SelectOne_Result>("usp_AddressBook_SelectOne", addressBookIDParameter, errorCode);
        }
    
        public virtual int usp_AddressBook_Update(Nullable<int> addressBookID, string firstName, string lastName, string email, string homePhone, string cellPhone, string fax, string userName, string company, string address1, string address2, string zipCode, string city, Nullable<int> countryID, Nullable<int> provinceID, Nullable<int> districtID, Nullable<bool> isPrimary, Nullable<bool> isPrimaryBilling, Nullable<bool> isPrimaryShipping, string roleName, ObjectParameter errorCode)
        {
            var addressBookIDParameter = addressBookID.HasValue ?
                new ObjectParameter("AddressBookID", addressBookID) :
                new ObjectParameter("AddressBookID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isPrimaryBillingParameter = isPrimaryBilling.HasValue ?
                new ObjectParameter("IsPrimaryBilling", isPrimaryBilling) :
                new ObjectParameter("IsPrimaryBilling", typeof(bool));
    
            var isPrimaryShippingParameter = isPrimaryShipping.HasValue ?
                new ObjectParameter("IsPrimaryShipping", isPrimaryShipping) :
                new ObjectParameter("IsPrimaryShipping", typeof(bool));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook_Update", addressBookIDParameter, firstNameParameter, lastNameParameter, emailParameter, homePhoneParameter, cellPhoneParameter, faxParameter, userNameParameter, companyParameter, address1Parameter, address2Parameter, zipCodeParameter, cityParameter, countryIDParameter, provinceIDParameter, districtIDParameter, isPrimaryParameter, isPrimaryBillingParameter, isPrimaryShippingParameter, roleNameParameter, errorCode);
        }
    
        public virtual int usp_AddressBook_Update2(Nullable<int> addressBookID, string firstName, string lastName, string email, string homePhone, string cellPhone, string fax, string userName, string company, string address1, string address2, string zipCode, string city, Nullable<int> countryID, Nullable<int> provinceID, Nullable<int> districtID, Nullable<bool> isPrimary, Nullable<bool> isPrimaryBilling, Nullable<bool> isPrimaryShipping, string roleName, string convertedFirstName, string imageName, ObjectParameter errorCode)
        {
            var addressBookIDParameter = addressBookID.HasValue ?
                new ObjectParameter("AddressBookID", addressBookID) :
                new ObjectParameter("AddressBookID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isPrimaryBillingParameter = isPrimaryBilling.HasValue ?
                new ObjectParameter("IsPrimaryBilling", isPrimaryBilling) :
                new ObjectParameter("IsPrimaryBilling", typeof(bool));
    
            var isPrimaryShippingParameter = isPrimaryShipping.HasValue ?
                new ObjectParameter("IsPrimaryShipping", isPrimaryShipping) :
                new ObjectParameter("IsPrimaryShipping", typeof(bool));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var convertedFirstNameParameter = convertedFirstName != null ?
                new ObjectParameter("ConvertedFirstName", convertedFirstName) :
                new ObjectParameter("ConvertedFirstName", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook_Update2", addressBookIDParameter, firstNameParameter, lastNameParameter, emailParameter, homePhoneParameter, cellPhoneParameter, faxParameter, userNameParameter, companyParameter, address1Parameter, address2Parameter, zipCodeParameter, cityParameter, countryIDParameter, provinceIDParameter, districtIDParameter, isPrimaryParameter, isPrimaryBillingParameter, isPrimaryShippingParameter, roleNameParameter, convertedFirstNameParameter, imageNameParameter, errorCode);
        }
    
        public virtual int usp_AddressBook1_Delete(Nullable<int> addressBookID, ObjectParameter errorCode)
        {
            var addressBookIDParameter = addressBookID.HasValue ?
                new ObjectParameter("AddressBookID", addressBookID) :
                new ObjectParameter("AddressBookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook1_Delete", addressBookIDParameter, errorCode);
        }
    
        public virtual int usp_AddressBook1_Insert(string firstName, string lastName, string email, string homePhone, string cellPhone, string fax, string userName, string company, string address1, string address2, string zipCode, string city, Nullable<int> countryID, Nullable<int> provinceID, Nullable<int> districtID, Nullable<bool> isPrimary, Nullable<bool> isPrimaryBilling, Nullable<bool> isPrimaryShipping, string roleName, ObjectParameter errorCode)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isPrimaryBillingParameter = isPrimaryBilling.HasValue ?
                new ObjectParameter("IsPrimaryBilling", isPrimaryBilling) :
                new ObjectParameter("IsPrimaryBilling", typeof(bool));
    
            var isPrimaryShippingParameter = isPrimaryShipping.HasValue ?
                new ObjectParameter("IsPrimaryShipping", isPrimaryShipping) :
                new ObjectParameter("IsPrimaryShipping", typeof(bool));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook1_Insert", firstNameParameter, lastNameParameter, emailParameter, homePhoneParameter, cellPhoneParameter, faxParameter, userNameParameter, companyParameter, address1Parameter, address2Parameter, zipCodeParameter, cityParameter, countryIDParameter, provinceIDParameter, districtIDParameter, isPrimaryParameter, isPrimaryBillingParameter, isPrimaryShippingParameter, roleNameParameter, errorCode);
        }
    
        public virtual int usp_AddressBook1_SelectAll(Nullable<int> addressBookID, string firstName, string lastName, string email, string homePhone, string cellPhone, string fax, string userName, string company, string address1, string address2, string zipCode, string city, Nullable<int> countryID, Nullable<int> provinceID, Nullable<int> districtID, Nullable<bool> isPrimary, Nullable<bool> isPrimaryBilling, Nullable<bool> isPrimaryShipping, string roleName, ObjectParameter errorCode)
        {
            var addressBookIDParameter = addressBookID.HasValue ?
                new ObjectParameter("AddressBookID", addressBookID) :
                new ObjectParameter("AddressBookID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isPrimaryBillingParameter = isPrimaryBilling.HasValue ?
                new ObjectParameter("IsPrimaryBilling", isPrimaryBilling) :
                new ObjectParameter("IsPrimaryBilling", typeof(bool));
    
            var isPrimaryShippingParameter = isPrimaryShipping.HasValue ?
                new ObjectParameter("IsPrimaryShipping", isPrimaryShipping) :
                new ObjectParameter("IsPrimaryShipping", typeof(bool));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook1_SelectAll", addressBookIDParameter, firstNameParameter, lastNameParameter, emailParameter, homePhoneParameter, cellPhoneParameter, faxParameter, userNameParameter, companyParameter, address1Parameter, address2Parameter, zipCodeParameter, cityParameter, countryIDParameter, provinceIDParameter, districtIDParameter, isPrimaryParameter, isPrimaryBillingParameter, isPrimaryShippingParameter, roleNameParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_AddressBook1_SelectOne_Result> usp_AddressBook1_SelectOne(Nullable<int> addressBookID, ObjectParameter errorCode)
        {
            var addressBookIDParameter = addressBookID.HasValue ?
                new ObjectParameter("AddressBookID", addressBookID) :
                new ObjectParameter("AddressBookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AddressBook1_SelectOne_Result>("usp_AddressBook1_SelectOne", addressBookIDParameter, errorCode);
        }
    
        public virtual int usp_AddressBook1_Update(Nullable<int> addressBookID, string firstName, string lastName, string email, string homePhone, string cellPhone, string fax, string userName, string company, string address1, string address2, string zipCode, string city, Nullable<int> countryID, Nullable<int> provinceID, Nullable<int> districtID, Nullable<bool> isPrimary, Nullable<bool> isPrimaryBilling, Nullable<bool> isPrimaryShipping, string roleName, ObjectParameter errorCode)
        {
            var addressBookIDParameter = addressBookID.HasValue ?
                new ObjectParameter("AddressBookID", addressBookID) :
                new ObjectParameter("AddressBookID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isPrimaryBillingParameter = isPrimaryBilling.HasValue ?
                new ObjectParameter("IsPrimaryBilling", isPrimaryBilling) :
                new ObjectParameter("IsPrimaryBilling", typeof(bool));
    
            var isPrimaryShippingParameter = isPrimaryShipping.HasValue ?
                new ObjectParameter("IsPrimaryShipping", isPrimaryShipping) :
                new ObjectParameter("IsPrimaryShipping", typeof(bool));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBook1_Update", addressBookIDParameter, firstNameParameter, lastNameParameter, emailParameter, homePhoneParameter, cellPhoneParameter, faxParameter, userNameParameter, companyParameter, address1Parameter, address2Parameter, zipCodeParameter, cityParameter, countryIDParameter, provinceIDParameter, districtIDParameter, isPrimaryParameter, isPrimaryBillingParameter, isPrimaryShippingParameter, roleNameParameter, errorCode);
        }
    
        public virtual int usp_AddressBookImage_Delete(Nullable<int> addressBookID, ObjectParameter errorCode)
        {
            var addressBookIDParameter = addressBookID.HasValue ?
                new ObjectParameter("AddressBookID", addressBookID) :
                new ObjectParameter("AddressBookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressBookImage_Delete", addressBookIDParameter, errorCode);
        }
    
        public virtual int usp_AdsBanner_Delete(Nullable<int> adsBannerID, ObjectParameter errorCode)
        {
            var adsBannerIDParameter = adsBannerID.HasValue ?
                new ObjectParameter("AdsBannerID", adsBannerID) :
                new ObjectParameter("AdsBannerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AdsBanner_Delete", adsBannerIDParameter, errorCode);
        }
    
        public virtual int usp_AdsBanner_Insert(string fileName, string convertedAdsBannerName, Nullable<int> adsCategoryID, string companyName, string website, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> priority, Nullable<bool> isAvailable, ObjectParameter outFileName, Nullable<double> ratio, ObjectParameter errorCode)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var convertedAdsBannerNameParameter = convertedAdsBannerName != null ?
                new ObjectParameter("ConvertedAdsBannerName", convertedAdsBannerName) :
                new ObjectParameter("ConvertedAdsBannerName", typeof(string));
    
            var adsCategoryIDParameter = adsCategoryID.HasValue ?
                new ObjectParameter("AdsCategoryID", adsCategoryID) :
                new ObjectParameter("AdsCategoryID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var ratioParameter = ratio.HasValue ?
                new ObjectParameter("Ratio", ratio) :
                new ObjectParameter("Ratio", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AdsBanner_Insert", fileNameParameter, convertedAdsBannerNameParameter, adsCategoryIDParameter, companyNameParameter, websiteParameter, fromDateParameter, toDateParameter, priorityParameter, isAvailableParameter, outFileName, ratioParameter, errorCode);
        }
    
        public virtual int usp_AdsBanner_QuickUpdate(Nullable<int> adsBannerID, Nullable<int> priority, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var adsBannerIDParameter = adsBannerID.HasValue ?
                new ObjectParameter("AdsBannerID", adsBannerID) :
                new ObjectParameter("AdsBannerID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AdsBanner_QuickUpdate", adsBannerIDParameter, priorityParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_AdsBanner_SelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, Nullable<int> adsCategoryID, string companyName, string website, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var adsCategoryIDParameter = adsCategoryID.HasValue ?
                new ObjectParameter("AdsCategoryID", adsCategoryID) :
                new ObjectParameter("AdsCategoryID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AdsBanner_SelectAll", startRowIndexParameter, endRowIndexParameter, adsCategoryIDParameter, companyNameParameter, websiteParameter, fromDateParameter, toDateParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter);
        }
    
        public virtual int usp_AdsBanner_SelectAll1(Nullable<int> startRowIndex, Nullable<int> endRowIndex, Nullable<int> adsCategoryID, string companyName, string website, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var adsCategoryIDParameter = adsCategoryID.HasValue ?
                new ObjectParameter("AdsCategoryID", adsCategoryID) :
                new ObjectParameter("AdsCategoryID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AdsBanner_SelectAll1", startRowIndexParameter, endRowIndexParameter, adsCategoryIDParameter, companyNameParameter, websiteParameter, fromDateParameter, toDateParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_AdsBanner_SelectOne_Result> usp_AdsBanner_SelectOne(Nullable<int> adsBannerID)
        {
            var adsBannerIDParameter = adsBannerID.HasValue ?
                new ObjectParameter("AdsBannerID", adsBannerID) :
                new ObjectParameter("AdsBannerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AdsBanner_SelectOne_Result>("usp_AdsBanner_SelectOne", adsBannerIDParameter);
        }
    
        public virtual ObjectResult<usp_AdsBanner_SelectOne1_Result> usp_AdsBanner_SelectOne1(Nullable<int> adsBannerID, ObjectParameter errorCode)
        {
            var adsBannerIDParameter = adsBannerID.HasValue ?
                new ObjectParameter("AdsBannerID", adsBannerID) :
                new ObjectParameter("AdsBannerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AdsBanner_SelectOne1_Result>("usp_AdsBanner_SelectOne1", adsBannerIDParameter, errorCode);
        }
    
        public virtual int usp_AdsBanner_Update(Nullable<int> adsBannerID, string fileName, string convertedAdsBannerName, Nullable<int> adsCategoryID, string companyName, string website, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> priority, Nullable<bool> isAvailable, Nullable<double> ratio, ObjectParameter errorCode)
        {
            var adsBannerIDParameter = adsBannerID.HasValue ?
                new ObjectParameter("AdsBannerID", adsBannerID) :
                new ObjectParameter("AdsBannerID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var convertedAdsBannerNameParameter = convertedAdsBannerName != null ?
                new ObjectParameter("ConvertedAdsBannerName", convertedAdsBannerName) :
                new ObjectParameter("ConvertedAdsBannerName", typeof(string));
    
            var adsCategoryIDParameter = adsCategoryID.HasValue ?
                new ObjectParameter("AdsCategoryID", adsCategoryID) :
                new ObjectParameter("AdsCategoryID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var ratioParameter = ratio.HasValue ?
                new ObjectParameter("Ratio", ratio) :
                new ObjectParameter("Ratio", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AdsBanner_Update", adsBannerIDParameter, fileNameParameter, convertedAdsBannerNameParameter, adsCategoryIDParameter, companyNameParameter, websiteParameter, fromDateParameter, toDateParameter, priorityParameter, isAvailableParameter, ratioParameter, errorCode);
        }
    
        public virtual int usp_AdsCategory_Delete(Nullable<int> adsCategoryID, ObjectParameter errorCode)
        {
            var adsCategoryIDParameter = adsCategoryID.HasValue ?
                new ObjectParameter("AdsCategoryID", adsCategoryID) :
                new ObjectParameter("AdsCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AdsCategory_Delete", adsCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_AdsCategory_Insert(string adsCategoryName, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var adsCategoryNameParameter = adsCategoryName != null ?
                new ObjectParameter("AdsCategoryName", adsCategoryName) :
                new ObjectParameter("AdsCategoryName", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AdsCategory_Insert", adsCategoryNameParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_AdsCategory_SelectAll_Result> usp_AdsCategory_SelectAll(Nullable<bool> isAvailable, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AdsCategory_SelectAll_Result>("usp_AdsCategory_SelectAll", isAvailableParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_AdsCategory_SelectOne_Result> usp_AdsCategory_SelectOne(Nullable<int> adsCategoryID, ObjectParameter errorCode)
        {
            var adsCategoryIDParameter = adsCategoryID.HasValue ?
                new ObjectParameter("AdsCategoryID", adsCategoryID) :
                new ObjectParameter("AdsCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AdsCategory_SelectOne_Result>("usp_AdsCategory_SelectOne", adsCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_AdsCategory_Update(Nullable<int> adsCategoryID, string adsCategoryName, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var adsCategoryIDParameter = adsCategoryID.HasValue ?
                new ObjectParameter("AdsCategoryID", adsCategoryID) :
                new ObjectParameter("AdsCategoryID", typeof(int));
    
            var adsCategoryNameParameter = adsCategoryName != null ?
                new ObjectParameter("AdsCategoryName", adsCategoryName) :
                new ObjectParameter("AdsCategoryName", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AdsCategory_Update", adsCategoryIDParameter, adsCategoryNameParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_Article_Delete(Nullable<int> articleID, ObjectParameter errorCode)
        {
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Article_Delete", articleIDParameter, errorCode);
        }
    
        public virtual int usp_Article_Insert(string imageName, string metaTittle, string metaDescription, string articleTitle, string convertedArticleTitle, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string articleTitleEn, string descriptionEn, string contentEn, string tagEn, Nullable<int> articleCategoryID, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var articleTitleParameter = articleTitle != null ?
                new ObjectParameter("ArticleTitle", articleTitle) :
                new ObjectParameter("ArticleTitle", typeof(string));
    
            var convertedArticleTitleParameter = convertedArticleTitle != null ?
                new ObjectParameter("ConvertedArticleTitle", convertedArticleTitle) :
                new ObjectParameter("ConvertedArticleTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var articleTitleEnParameter = articleTitleEn != null ?
                new ObjectParameter("ArticleTitleEn", articleTitleEn) :
                new ObjectParameter("ArticleTitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Article_Insert", imageNameParameter, metaTittleParameter, metaDescriptionParameter, articleTitleParameter, convertedArticleTitleParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, articleTitleEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, articleCategoryIDParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, isAvailableParameter, priorityParameter, outImageName, errorCode);
        }
    
        public virtual int usp_Article_QuickUpdate(Nullable<int> articleID, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Article_QuickUpdate", articleIDParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Article_SelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, string keyword, string articleTitle, string description, Nullable<int> articleCategoryID, string tag, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var articleTitleParameter = articleTitle != null ?
                new ObjectParameter("ArticleTitle", articleTitle) :
                new ObjectParameter("ArticleTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Article_SelectAll", startRowIndexParameter, endRowIndexParameter, keywordParameter, articleTitleParameter, descriptionParameter, articleCategoryIDParameter, tagParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, fromDateParameter, toDateParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Article_SelectOne_Result> usp_Article_SelectOne(Nullable<int> articleID, ObjectParameter errorCode)
        {
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Article_SelectOne_Result>("usp_Article_SelectOne", articleIDParameter, errorCode);
        }
    
        public virtual int usp_Article_Update(Nullable<int> articleID, string metaTittle, string metaDescription, string articleTitle, string convertedArticleTitle, string imageName, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string articleTitleEn, string descriptionEn, string contentEn, string tagEn, Nullable<int> articleCategoryID, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var articleTitleParameter = articleTitle != null ?
                new ObjectParameter("ArticleTitle", articleTitle) :
                new ObjectParameter("ArticleTitle", typeof(string));
    
            var convertedArticleTitleParameter = convertedArticleTitle != null ?
                new ObjectParameter("ConvertedArticleTitle", convertedArticleTitle) :
                new ObjectParameter("ConvertedArticleTitle", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var articleTitleEnParameter = articleTitleEn != null ?
                new ObjectParameter("ArticleTitleEn", articleTitleEn) :
                new ObjectParameter("ArticleTitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Article_Update", articleIDParameter, metaTittleParameter, metaDescriptionParameter, articleTitleParameter, convertedArticleTitleParameter, imageNameParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, articleTitleEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, articleCategoryIDParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ArticleCategory_Delete(Nullable<int> articleCategoryID, ObjectParameter errorCode)
        {
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ArticleCategory_Delete", articleCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ArticleCategory_DownOrder(Nullable<int> articleCategoryID, ObjectParameter errorCode)
        {
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ArticleCategory_DownOrder", articleCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ArticleCategory_Insert(string articleCategoryName, string articleCategoryNameEn, string convertedArticleCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var articleCategoryNameParameter = articleCategoryName != null ?
                new ObjectParameter("ArticleCategoryName", articleCategoryName) :
                new ObjectParameter("ArticleCategoryName", typeof(string));
    
            var articleCategoryNameEnParameter = articleCategoryNameEn != null ?
                new ObjectParameter("ArticleCategoryNameEn", articleCategoryNameEn) :
                new ObjectParameter("ArticleCategoryNameEn", typeof(string));
    
            var convertedArticleCategoryNameParameter = convertedArticleCategoryName != null ?
                new ObjectParameter("ConvertedArticleCategoryName", convertedArticleCategoryName) :
                new ObjectParameter("ConvertedArticleCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ArticleCategory_Insert", articleCategoryNameParameter, articleCategoryNameEnParameter, convertedArticleCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, outImageName, errorCode);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_ArticleCategory_IsChildrenExist(Nullable<int> articleCategoryID, ObjectParameter errorCode)
        {
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_ArticleCategory_IsChildrenExist", articleCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ArticleCategory_QuickUpdate(Nullable<int> articleCategoryID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ArticleCategory_QuickUpdate", articleCategoryIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ArticleCategory_SelectAll_Result> usp_ArticleCategory_SelectAll(ObjectParameter errorCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ArticleCategory_SelectAll_Result>("usp_ArticleCategory_SelectAll", errorCode);
        }
    
        public virtual ObjectResult<usp_ArticleCategory_SelectOne_Result> usp_ArticleCategory_SelectOne(Nullable<int> articleCategoryID, ObjectParameter errorCode)
        {
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ArticleCategory_SelectOne_Result>("usp_ArticleCategory_SelectOne", articleCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ArticleCategory_Update(Nullable<int> articleCategoryID, string articleCategoryName, string articleCategoryNameEn, string convertedArticleCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            var articleCategoryNameParameter = articleCategoryName != null ?
                new ObjectParameter("ArticleCategoryName", articleCategoryName) :
                new ObjectParameter("ArticleCategoryName", typeof(string));
    
            var articleCategoryNameEnParameter = articleCategoryNameEn != null ?
                new ObjectParameter("ArticleCategoryNameEn", articleCategoryNameEn) :
                new ObjectParameter("ArticleCategoryNameEn", typeof(string));
    
            var convertedArticleCategoryNameParameter = convertedArticleCategoryName != null ?
                new ObjectParameter("ConvertedArticleCategoryName", convertedArticleCategoryName) :
                new ObjectParameter("ConvertedArticleCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ArticleCategory_Update", articleCategoryIDParameter, articleCategoryNameParameter, articleCategoryNameEnParameter, convertedArticleCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_ArticleCategory_UpOrder(Nullable<int> articleCategoryID, ObjectParameter errorCode)
        {
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ArticleCategory_UpOrder", articleCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ArticleCategoryForEdit_SelectAll_Result> usp_ArticleCategoryForEdit_SelectAll(Nullable<int> articleCategoryID, ObjectParameter errorCode)
        {
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ArticleCategoryForEdit_SelectAll_Result>("usp_ArticleCategoryForEdit_SelectAll", articleCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ArticleCategoryHierarchyToTop_SelectAll_Result> usp_ArticleCategoryHierarchyToTop_SelectAll(Nullable<int> currentArticleCategoryID, ObjectParameter errorCode)
        {
            var currentArticleCategoryIDParameter = currentArticleCategoryID.HasValue ?
                new ObjectParameter("CurrentArticleCategoryID", currentArticleCategoryID) :
                new ObjectParameter("CurrentArticleCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ArticleCategoryHierarchyToTop_SelectAll_Result>("usp_ArticleCategoryHierarchyToTop_SelectAll", currentArticleCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ArticleCategoryImage_Delete(Nullable<int> articleCategoryID, ObjectParameter errorCode)
        {
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ArticleCategoryImage_Delete", articleCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ArticleImage_Delete(Nullable<int> articleID, ObjectParameter errorCode)
        {
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ArticleImage_Delete", articleIDParameter, errorCode);
        }
    
        public virtual int usp_Career_Delete(Nullable<int> careerID, ObjectParameter errorCode)
        {
            var careerIDParameter = careerID.HasValue ?
                new ObjectParameter("CareerID", careerID) :
                new ObjectParameter("CareerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Career_Delete", careerIDParameter, errorCode);
        }
    
        public virtual int usp_Career_Insert(string imageName, string metaTittle, string metaDescription, string careerTitle, string convertedCareerTitle, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string careerTitleEn, string descriptionEn, string contentEn, string tagEn, Nullable<int> careerCategoryID, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var careerTitleParameter = careerTitle != null ?
                new ObjectParameter("CareerTitle", careerTitle) :
                new ObjectParameter("CareerTitle", typeof(string));
    
            var convertedCareerTitleParameter = convertedCareerTitle != null ?
                new ObjectParameter("ConvertedCareerTitle", convertedCareerTitle) :
                new ObjectParameter("ConvertedCareerTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var careerTitleEnParameter = careerTitleEn != null ?
                new ObjectParameter("CareerTitleEn", careerTitleEn) :
                new ObjectParameter("CareerTitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Career_Insert", imageNameParameter, metaTittleParameter, metaDescriptionParameter, careerTitleParameter, convertedCareerTitleParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, careerTitleEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, careerCategoryIDParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, outImageName, errorCode);
        }
    
        public virtual int usp_Career_QuickUpdate(Nullable<int> careerID, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var careerIDParameter = careerID.HasValue ?
                new ObjectParameter("CareerID", careerID) :
                new ObjectParameter("CareerID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Career_QuickUpdate", careerIDParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Career_SelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, string keyword, string careerTitle, string description, Nullable<int> careerCategoryID, string tag, Nullable<bool> isShowOnHomePage, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var careerTitleParameter = careerTitle != null ?
                new ObjectParameter("CareerTitle", careerTitle) :
                new ObjectParameter("CareerTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Career_SelectAll", startRowIndexParameter, endRowIndexParameter, keywordParameter, careerTitleParameter, descriptionParameter, careerCategoryIDParameter, tagParameter, isShowOnHomePageParameter, fromDateParameter, toDateParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Career_SelectOne_Result> usp_Career_SelectOne(Nullable<int> careerID, ObjectParameter errorCode)
        {
            var careerIDParameter = careerID.HasValue ?
                new ObjectParameter("CareerID", careerID) :
                new ObjectParameter("CareerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Career_SelectOne_Result>("usp_Career_SelectOne", careerIDParameter, errorCode);
        }
    
        public virtual int usp_Career_Update(Nullable<int> careerID, string imageName, string metaTittle, string metaDescription, string careerTitle, string convertedCareerTitle, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string careerTitleEn, string descriptionEn, string contentEn, string tagEn, Nullable<int> careerCategoryID, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var careerIDParameter = careerID.HasValue ?
                new ObjectParameter("CareerID", careerID) :
                new ObjectParameter("CareerID", typeof(int));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var careerTitleParameter = careerTitle != null ?
                new ObjectParameter("CareerTitle", careerTitle) :
                new ObjectParameter("CareerTitle", typeof(string));
    
            var convertedCareerTitleParameter = convertedCareerTitle != null ?
                new ObjectParameter("ConvertedCareerTitle", convertedCareerTitle) :
                new ObjectParameter("ConvertedCareerTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var careerTitleEnParameter = careerTitleEn != null ?
                new ObjectParameter("CareerTitleEn", careerTitleEn) :
                new ObjectParameter("CareerTitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Career_Update", careerIDParameter, imageNameParameter, metaTittleParameter, metaDescriptionParameter, careerTitleParameter, convertedCareerTitleParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, careerTitleEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, careerCategoryIDParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_CareerCategory_Delete(Nullable<int> careerCategoryID, ObjectParameter errorCode)
        {
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CareerCategory_Delete", careerCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_CareerCategory_DownOrder(Nullable<int> careerCategoryID, ObjectParameter errorCode)
        {
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CareerCategory_DownOrder", careerCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_CareerCategory_Insert(string careerCategoryName, string careerCategoryNameEn, string convertedCareerCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var careerCategoryNameParameter = careerCategoryName != null ?
                new ObjectParameter("CareerCategoryName", careerCategoryName) :
                new ObjectParameter("CareerCategoryName", typeof(string));
    
            var careerCategoryNameEnParameter = careerCategoryNameEn != null ?
                new ObjectParameter("CareerCategoryNameEn", careerCategoryNameEn) :
                new ObjectParameter("CareerCategoryNameEn", typeof(string));
    
            var convertedCareerCategoryNameParameter = convertedCareerCategoryName != null ?
                new ObjectParameter("ConvertedCareerCategoryName", convertedCareerCategoryName) :
                new ObjectParameter("ConvertedCareerCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CareerCategory_Insert", careerCategoryNameParameter, careerCategoryNameEnParameter, convertedCareerCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, outImageName, errorCode);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_CareerCategory_IsChildrenExist(Nullable<int> careerCategoryID, ObjectParameter errorCode)
        {
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_CareerCategory_IsChildrenExist", careerCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_CareerCategory_QuickUpdate(Nullable<int> careerCategoryID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CareerCategory_QuickUpdate", careerCategoryIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_CareerCategory_SelectAll_Result> usp_CareerCategory_SelectAll(ObjectParameter errorCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CareerCategory_SelectAll_Result>("usp_CareerCategory_SelectAll", errorCode);
        }
    
        public virtual ObjectResult<usp_CareerCategory_SelectOne_Result> usp_CareerCategory_SelectOne(Nullable<int> careerCategoryID, ObjectParameter errorCode)
        {
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CareerCategory_SelectOne_Result>("usp_CareerCategory_SelectOne", careerCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_CareerCategory_Update(Nullable<int> careerCategoryID, string careerCategoryName, string careerCategoryNameEn, string convertedCareerCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            var careerCategoryNameParameter = careerCategoryName != null ?
                new ObjectParameter("CareerCategoryName", careerCategoryName) :
                new ObjectParameter("CareerCategoryName", typeof(string));
    
            var careerCategoryNameEnParameter = careerCategoryNameEn != null ?
                new ObjectParameter("CareerCategoryNameEn", careerCategoryNameEn) :
                new ObjectParameter("CareerCategoryNameEn", typeof(string));
    
            var convertedCareerCategoryNameParameter = convertedCareerCategoryName != null ?
                new ObjectParameter("ConvertedCareerCategoryName", convertedCareerCategoryName) :
                new ObjectParameter("ConvertedCareerCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CareerCategory_Update", careerCategoryIDParameter, careerCategoryNameParameter, careerCategoryNameEnParameter, convertedCareerCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_CareerCategory_UpOrder(Nullable<int> careerCategoryID, ObjectParameter errorCode)
        {
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CareerCategory_UpOrder", careerCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_CareerCategoryForEdit_SelectAll_Result> usp_CareerCategoryForEdit_SelectAll(Nullable<int> careerCategoryID, ObjectParameter errorCode)
        {
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CareerCategoryForEdit_SelectAll_Result>("usp_CareerCategoryForEdit_SelectAll", careerCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_CareerCategoryHierarchyToTop_SelectAll_Result> usp_CareerCategoryHierarchyToTop_SelectAll(Nullable<int> currentCareerCategoryID, ObjectParameter errorCode)
        {
            var currentCareerCategoryIDParameter = currentCareerCategoryID.HasValue ?
                new ObjectParameter("CurrentCareerCategoryID", currentCareerCategoryID) :
                new ObjectParameter("CurrentCareerCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CareerCategoryHierarchyToTop_SelectAll_Result>("usp_CareerCategoryHierarchyToTop_SelectAll", currentCareerCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_CareerCategoryImage_Delete(Nullable<int> careerCategoryID, ObjectParameter errorCode)
        {
            var careerCategoryIDParameter = careerCategoryID.HasValue ?
                new ObjectParameter("CareerCategoryID", careerCategoryID) :
                new ObjectParameter("CareerCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CareerCategoryImage_Delete", careerCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_CareerImage_Delete(Nullable<int> careerID, ObjectParameter errorCode)
        {
            var careerIDParameter = careerID.HasValue ?
                new ObjectParameter("CareerID", careerID) :
                new ObjectParameter("CareerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CareerImage_Delete", careerIDParameter, errorCode);
        }
    
        public virtual int usp_Comment_Delete(Nullable<int> commentID, ObjectParameter errorCode)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Comment_Delete", commentIDParameter, errorCode);
        }
    
        public virtual int usp_Comment_Insert(string userName, string link, string title, string content, Nullable<int> priority, Nullable<bool> isApproved, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Comment_Insert", userNameParameter, linkParameter, titleParameter, contentParameter, priorityParameter, isApprovedParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_Comment_QuickUpdate(Nullable<int> commentID, Nullable<bool> isApproved, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Comment_QuickUpdate", commentIDParameter, isApprovedParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Comment_SelectAll(Nullable<int> commentID, string userName, string keyword, string link, string title, string content, Nullable<System.DateTime> createDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> priority, Nullable<bool> isApproved, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Comment_SelectAll", commentIDParameter, userNameParameter, keywordParameter, linkParameter, titleParameter, contentParameter, createDateParameter, updateDateParameter, fromDateParameter, toDateParameter, priorityParameter, isApprovedParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Comment_SelectOne_Result> usp_Comment_SelectOne(Nullable<int> commentID, ObjectParameter errorCode)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Comment_SelectOne_Result>("usp_Comment_SelectOne", commentIDParameter, errorCode);
        }
    
        public virtual int usp_Comment_Update(Nullable<int> commentID, string userName, string link, string title, string content, Nullable<int> priority, Nullable<bool> isApproved, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Comment_Update", commentIDParameter, userNameParameter, linkParameter, titleParameter, contentParameter, priorityParameter, isApprovedParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_Country_Delete(Nullable<int> countryID, ObjectParameter errorCode)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Country_Delete", countryIDParameter, errorCode);
        }
    
        public virtual int usp_Country_Insert(string countryName, string nationality, string shortName, Nullable<int> priority, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Country_Insert", countryNameParameter, nationalityParameter, shortNameParameter, priorityParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_Country_QuickUpdate(Nullable<int> countryID, Nullable<int> priority, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Country_QuickUpdate", countryIDParameter, priorityParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_Country_SelectAll(Nullable<int> countryID, string countryName, string nationality, string shortName, Nullable<int> priority, Nullable<bool> isAvailable, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Country_SelectAll", countryIDParameter, countryNameParameter, nationalityParameter, shortNameParameter, priorityParameter, isAvailableParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Country_SelectOne_Result> usp_Country_SelectOne(Nullable<int> countryID, ObjectParameter errorCode)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Country_SelectOne_Result>("usp_Country_SelectOne", countryIDParameter, errorCode);
        }
    
        public virtual int usp_Country_Update(Nullable<int> countryID, string countryName, string nationality, string shortName, Nullable<int> priority, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Country_Update", countryIDParameter, countryNameParameter, nationalityParameter, shortNameParameter, priorityParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_DeliveryMethods_Delete(Nullable<int> deliveryMethodsID, ObjectParameter errorCode)
        {
            var deliveryMethodsIDParameter = deliveryMethodsID.HasValue ?
                new ObjectParameter("DeliveryMethodsID", deliveryMethodsID) :
                new ObjectParameter("DeliveryMethodsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeliveryMethods_Delete", deliveryMethodsIDParameter, errorCode);
        }
    
        public virtual int usp_DeliveryMethods_Insert(string deliveryMethodsName, string deliveryMethodsNameEn, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var deliveryMethodsNameParameter = deliveryMethodsName != null ?
                new ObjectParameter("DeliveryMethodsName", deliveryMethodsName) :
                new ObjectParameter("DeliveryMethodsName", typeof(string));
    
            var deliveryMethodsNameEnParameter = deliveryMethodsNameEn != null ?
                new ObjectParameter("DeliveryMethodsNameEn", deliveryMethodsNameEn) :
                new ObjectParameter("DeliveryMethodsNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeliveryMethods_Insert", deliveryMethodsNameParameter, deliveryMethodsNameEnParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_DeliveryMethods_SelectAll(string keyword, Nullable<int> deliveryMethodsID, string deliveryMethodsName, string deliveryMethodsNameEn, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var deliveryMethodsIDParameter = deliveryMethodsID.HasValue ?
                new ObjectParameter("DeliveryMethodsID", deliveryMethodsID) :
                new ObjectParameter("DeliveryMethodsID", typeof(int));
    
            var deliveryMethodsNameParameter = deliveryMethodsName != null ?
                new ObjectParameter("DeliveryMethodsName", deliveryMethodsName) :
                new ObjectParameter("DeliveryMethodsName", typeof(string));
    
            var deliveryMethodsNameEnParameter = deliveryMethodsNameEn != null ?
                new ObjectParameter("DeliveryMethodsNameEn", deliveryMethodsNameEn) :
                new ObjectParameter("DeliveryMethodsNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeliveryMethods_SelectAll", keywordParameter, deliveryMethodsIDParameter, deliveryMethodsNameParameter, deliveryMethodsNameEnParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_DeliveryMethods_SelectOne_Result> usp_DeliveryMethods_SelectOne(Nullable<int> deliveryMethodsID, ObjectParameter errorCode)
        {
            var deliveryMethodsIDParameter = deliveryMethodsID.HasValue ?
                new ObjectParameter("DeliveryMethodsID", deliveryMethodsID) :
                new ObjectParameter("DeliveryMethodsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DeliveryMethods_SelectOne_Result>("usp_DeliveryMethods_SelectOne", deliveryMethodsIDParameter, errorCode);
        }
    
        public virtual int usp_DeliveryMethods_Update(Nullable<int> deliveryMethodsID, string deliveryMethodsName, string deliveryMethodsNameEn, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var deliveryMethodsIDParameter = deliveryMethodsID.HasValue ?
                new ObjectParameter("DeliveryMethodsID", deliveryMethodsID) :
                new ObjectParameter("DeliveryMethodsID", typeof(int));
    
            var deliveryMethodsNameParameter = deliveryMethodsName != null ?
                new ObjectParameter("DeliveryMethodsName", deliveryMethodsName) :
                new ObjectParameter("DeliveryMethodsName", typeof(string));
    
            var deliveryMethodsNameEnParameter = deliveryMethodsNameEn != null ?
                new ObjectParameter("DeliveryMethodsNameEn", deliveryMethodsNameEn) :
                new ObjectParameter("DeliveryMethodsNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeliveryMethods_Update", deliveryMethodsIDParameter, deliveryMethodsNameParameter, deliveryMethodsNameEnParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_District_Delete(Nullable<int> districtID, ObjectParameter errorCode)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_District_Delete", districtIDParameter, errorCode);
        }
    
        public virtual int usp_District_Insert(string districtName, Nullable<int> provinceID, Nullable<bool> isAvailable, Nullable<int> priority, Nullable<decimal> shippingPrice, ObjectParameter errorCode)
        {
            var districtNameParameter = districtName != null ?
                new ObjectParameter("DistrictName", districtName) :
                new ObjectParameter("DistrictName", typeof(string));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var shippingPriceParameter = shippingPrice.HasValue ?
                new ObjectParameter("ShippingPrice", shippingPrice) :
                new ObjectParameter("ShippingPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_District_Insert", districtNameParameter, provinceIDParameter, isAvailableParameter, priorityParameter, shippingPriceParameter, errorCode);
        }
    
        public virtual int usp_District_QuickUpdate(Nullable<int> districtID, Nullable<int> priority, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_District_QuickUpdate", districtIDParameter, priorityParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_District_SelectAll(string districtName, string provinceIDs, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var districtNameParameter = districtName != null ?
                new ObjectParameter("DistrictName", districtName) :
                new ObjectParameter("DistrictName", typeof(string));
    
            var provinceIDsParameter = provinceIDs != null ?
                new ObjectParameter("ProvinceIDs", provinceIDs) :
                new ObjectParameter("ProvinceIDs", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_District_SelectAll", districtNameParameter, provinceIDsParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_District_SelectOne_Result> usp_District_SelectOne(Nullable<int> districtID, ObjectParameter errorCode)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_District_SelectOne_Result>("usp_District_SelectOne", districtIDParameter, errorCode);
        }
    
        public virtual int usp_District_Update(Nullable<int> districtID, string districtName, Nullable<int> provinceID, Nullable<bool> isAvailable, Nullable<int> priority, Nullable<decimal> shippingPrice, ObjectParameter errorCode)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var districtNameParameter = districtName != null ?
                new ObjectParameter("DistrictName", districtName) :
                new ObjectParameter("DistrictName", typeof(string));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var shippingPriceParameter = shippingPrice.HasValue ?
                new ObjectParameter("ShippingPrice", shippingPrice) :
                new ObjectParameter("ShippingPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_District_Update", districtIDParameter, districtNameParameter, provinceIDParameter, isAvailableParameter, priorityParameter, shippingPriceParameter, errorCode);
        }
    
        public virtual int usp_Download_Delete(Nullable<int> downloadID, ObjectParameter errorCode)
        {
            var downloadIDParameter = downloadID.HasValue ?
                new ObjectParameter("DownloadID", downloadID) :
                new ObjectParameter("DownloadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Download_Delete", downloadIDParameter, errorCode);
        }
    
        public virtual int usp_Download_Insert(string downloadName, string downloadNameEn, string convertedDownloadName, string imageName, string filePath, Nullable<int> downloadCategoryID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outDownloadID, ObjectParameter errorCode)
        {
            var downloadNameParameter = downloadName != null ?
                new ObjectParameter("DownloadName", downloadName) :
                new ObjectParameter("DownloadName", typeof(string));
    
            var downloadNameEnParameter = downloadNameEn != null ?
                new ObjectParameter("DownloadNameEn", downloadNameEn) :
                new ObjectParameter("DownloadNameEn", typeof(string));
    
            var convertedDownloadNameParameter = convertedDownloadName != null ?
                new ObjectParameter("ConvertedDownloadName", convertedDownloadName) :
                new ObjectParameter("ConvertedDownloadName", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var downloadCategoryIDParameter = downloadCategoryID.HasValue ?
                new ObjectParameter("DownloadCategoryID", downloadCategoryID) :
                new ObjectParameter("DownloadCategoryID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Download_Insert", downloadNameParameter, downloadNameEnParameter, convertedDownloadNameParameter, imageNameParameter, filePathParameter, downloadCategoryIDParameter, isAvailableParameter, priorityParameter, outDownloadID, errorCode);
        }
    
        public virtual int usp_Download_QuickUpdate(Nullable<int> downloadID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var downloadIDParameter = downloadID.HasValue ?
                new ObjectParameter("DownloadID", downloadID) :
                new ObjectParameter("DownloadID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Download_QuickUpdate", downloadIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Download_SelectAll(string keyword, string downloadName, Nullable<int> downloadCategoryID, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var downloadNameParameter = downloadName != null ?
                new ObjectParameter("DownloadName", downloadName) :
                new ObjectParameter("DownloadName", typeof(string));
    
            var downloadCategoryIDParameter = downloadCategoryID.HasValue ?
                new ObjectParameter("DownloadCategoryID", downloadCategoryID) :
                new ObjectParameter("DownloadCategoryID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Download_SelectAll", keywordParameter, downloadNameParameter, downloadCategoryIDParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual int usp_Download_SelectMaxID(ObjectParameter downloadID, ObjectParameter errorCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Download_SelectMaxID", downloadID, errorCode);
        }
    
        public virtual ObjectResult<usp_Download_SelectOne_Result> usp_Download_SelectOne(Nullable<int> downloadID, ObjectParameter errorCode)
        {
            var downloadIDParameter = downloadID.HasValue ?
                new ObjectParameter("DownloadID", downloadID) :
                new ObjectParameter("DownloadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Download_SelectOne_Result>("usp_Download_SelectOne", downloadIDParameter, errorCode);
        }
    
        public virtual int usp_Download_Update(Nullable<int> downloadID, string downloadName, string downloadNameEn, string convertedDownloadName, string imageName, string filePath, Nullable<int> downloadCategoryID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var downloadIDParameter = downloadID.HasValue ?
                new ObjectParameter("DownloadID", downloadID) :
                new ObjectParameter("DownloadID", typeof(int));
    
            var downloadNameParameter = downloadName != null ?
                new ObjectParameter("DownloadName", downloadName) :
                new ObjectParameter("DownloadName", typeof(string));
    
            var downloadNameEnParameter = downloadNameEn != null ?
                new ObjectParameter("DownloadNameEn", downloadNameEn) :
                new ObjectParameter("DownloadNameEn", typeof(string));
    
            var convertedDownloadNameParameter = convertedDownloadName != null ?
                new ObjectParameter("ConvertedDownloadName", convertedDownloadName) :
                new ObjectParameter("ConvertedDownloadName", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var downloadCategoryIDParameter = downloadCategoryID.HasValue ?
                new ObjectParameter("DownloadCategoryID", downloadCategoryID) :
                new ObjectParameter("DownloadCategoryID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Download_Update", downloadIDParameter, downloadNameParameter, downloadNameEnParameter, convertedDownloadNameParameter, imageNameParameter, filePathParameter, downloadCategoryIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_DownloadCategory_Delete(Nullable<int> downloadCategoryID, ObjectParameter errorCode)
        {
            var downloadCategoryIDParameter = downloadCategoryID.HasValue ?
                new ObjectParameter("DownloadCategoryID", downloadCategoryID) :
                new ObjectParameter("DownloadCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DownloadCategory_Delete", downloadCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_DownloadCategory_Insert(string imageName, string downloadCategoryName, string downloadCategoryNameEn, string convertedDownloadCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var downloadCategoryNameParameter = downloadCategoryName != null ?
                new ObjectParameter("DownloadCategoryName", downloadCategoryName) :
                new ObjectParameter("DownloadCategoryName", typeof(string));
    
            var downloadCategoryNameEnParameter = downloadCategoryNameEn != null ?
                new ObjectParameter("DownloadCategoryNameEn", downloadCategoryNameEn) :
                new ObjectParameter("DownloadCategoryNameEn", typeof(string));
    
            var convertedDownloadCategoryNameParameter = convertedDownloadCategoryName != null ?
                new ObjectParameter("ConvertedDownloadCategoryName", convertedDownloadCategoryName) :
                new ObjectParameter("ConvertedDownloadCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DownloadCategory_Insert", imageNameParameter, downloadCategoryNameParameter, downloadCategoryNameEnParameter, convertedDownloadCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, outImageName, errorCode);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_DownloadCategory_IsChildrenExist(Nullable<int> downloadCategoryID, ObjectParameter errorCode)
        {
            var downloadCategoryIDParameter = downloadCategoryID.HasValue ?
                new ObjectParameter("DownloadCategoryID", downloadCategoryID) :
                new ObjectParameter("DownloadCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_DownloadCategory_IsChildrenExist", downloadCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_DownloadCategory_QuickUpdate(Nullable<int> downloadCategoryID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var downloadCategoryIDParameter = downloadCategoryID.HasValue ?
                new ObjectParameter("DownloadCategoryID", downloadCategoryID) :
                new ObjectParameter("DownloadCategoryID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DownloadCategory_QuickUpdate", downloadCategoryIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_DownloadCategory_SelectAll(Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DownloadCategory_SelectAll", isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_DownloadCategory_SelectOne_Result> usp_DownloadCategory_SelectOne(Nullable<int> downloadCategoryID, ObjectParameter errorCode)
        {
            var downloadCategoryIDParameter = downloadCategoryID.HasValue ?
                new ObjectParameter("DownloadCategoryID", downloadCategoryID) :
                new ObjectParameter("DownloadCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DownloadCategory_SelectOne_Result>("usp_DownloadCategory_SelectOne", downloadCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_DownloadCategory_Update(Nullable<int> downloadCategoryID, string imageName, string downloadCategoryName, string downloadCategoryNameEn, string convertedDownloadCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var downloadCategoryIDParameter = downloadCategoryID.HasValue ?
                new ObjectParameter("DownloadCategoryID", downloadCategoryID) :
                new ObjectParameter("DownloadCategoryID", typeof(int));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var downloadCategoryNameParameter = downloadCategoryName != null ?
                new ObjectParameter("DownloadCategoryName", downloadCategoryName) :
                new ObjectParameter("DownloadCategoryName", typeof(string));
    
            var downloadCategoryNameEnParameter = downloadCategoryNameEn != null ?
                new ObjectParameter("DownloadCategoryNameEn", downloadCategoryNameEn) :
                new ObjectParameter("DownloadCategoryNameEn", typeof(string));
    
            var convertedDownloadCategoryNameParameter = convertedDownloadCategoryName != null ?
                new ObjectParameter("ConvertedDownloadCategoryName", convertedDownloadCategoryName) :
                new ObjectParameter("ConvertedDownloadCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DownloadCategory_Update", downloadCategoryIDParameter, imageNameParameter, downloadCategoryNameParameter, downloadCategoryNameEnParameter, convertedDownloadCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_DownloadCategoryImage_Delete(Nullable<int> downloadCategoryID, ObjectParameter errorCode)
        {
            var downloadCategoryIDParameter = downloadCategoryID.HasValue ?
                new ObjectParameter("DownloadCategoryID", downloadCategoryID) :
                new ObjectParameter("DownloadCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DownloadCategoryImage_Delete", downloadCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_DownloadImage_Delete(Nullable<int> downloadID, ObjectParameter errorCode)
        {
            var downloadIDParameter = downloadID.HasValue ?
                new ObjectParameter("DownloadID", downloadID) :
                new ObjectParameter("DownloadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DownloadImage_Delete", downloadIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ExchangeRate_SelectOne_Result> usp_ExchangeRate_SelectOne(ObjectParameter errorCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ExchangeRate_SelectOne_Result>("usp_ExchangeRate_SelectOne", errorCode);
        }
    
        public virtual int usp_ExchangeRate_Update(Nullable<decimal> gold, Nullable<decimal> usd, ObjectParameter errorCode)
        {
            var goldParameter = gold.HasValue ?
                new ObjectParameter("gold", gold) :
                new ObjectParameter("gold", typeof(decimal));
    
            var usdParameter = usd.HasValue ?
                new ObjectParameter("usd", usd) :
                new ObjectParameter("usd", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ExchangeRate_Update", goldParameter, usdParameter, errorCode);
        }
    
        public virtual int usp_Manufacturer_Delete(Nullable<int> manufacturerID, ObjectParameter errorCode)
        {
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Manufacturer_Delete", manufacturerIDParameter, errorCode);
        }
    
        public virtual int usp_Manufacturer_Delete1(Nullable<int> manufacturerID, ObjectParameter errorCode)
        {
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Manufacturer_Delete1", manufacturerIDParameter, errorCode);
        }
    
        public virtual int usp_Manufacturer_Insert(string manufacturerName, string manufacturerNameEn, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var manufacturerNameEnParameter = manufacturerNameEn != null ?
                new ObjectParameter("ManufacturerNameEn", manufacturerNameEn) :
                new ObjectParameter("ManufacturerNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Manufacturer_Insert", manufacturerNameParameter, manufacturerNameEnParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Manufacturer_Insert1(string manufacturerName, string manufacturerNameEn, string convertedManufacturerName, string manufacturerImage, Nullable<bool> isAvailable, Nullable<int> priority, Nullable<int> productID, string content, string contentEn, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var manufacturerNameEnParameter = manufacturerNameEn != null ?
                new ObjectParameter("ManufacturerNameEn", manufacturerNameEn) :
                new ObjectParameter("ManufacturerNameEn", typeof(string));
    
            var convertedManufacturerNameParameter = convertedManufacturerName != null ?
                new ObjectParameter("ConvertedManufacturerName", convertedManufacturerName) :
                new ObjectParameter("ConvertedManufacturerName", typeof(string));
    
            var manufacturerImageParameter = manufacturerImage != null ?
                new ObjectParameter("ManufacturerImage", manufacturerImage) :
                new ObjectParameter("ManufacturerImage", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Manufacturer_Insert1", manufacturerNameParameter, manufacturerNameEnParameter, convertedManufacturerNameParameter, manufacturerImageParameter, isAvailableParameter, priorityParameter, productIDParameter, contentParameter, contentEnParameter, outImageName, errorCode);
        }
    
        public virtual int usp_Manufacturer_QuickUpdate(Nullable<int> manufacturerID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Manufacturer_QuickUpdate", manufacturerIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Manufacturer_QuickUpdate1(Nullable<int> manufacturerID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Manufacturer_QuickUpdate1", manufacturerIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Manufacturer_SelectAll(string manufacturerName, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Manufacturer_SelectAll", manufacturerNameParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual int usp_Manufacturer_SelectAll1(string manufacturerName, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<int> productID, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Manufacturer_SelectAll1", manufacturerNameParameter, isAvailableParameter, priorityParameter, productIDParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Manufacturer_SelectOne_Result> usp_Manufacturer_SelectOne(Nullable<int> manufacturerID, ObjectParameter errorCode)
        {
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Manufacturer_SelectOne_Result>("usp_Manufacturer_SelectOne", manufacturerIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Manufacturer_SelectOne1_Result> usp_Manufacturer_SelectOne1(Nullable<int> manufacturerID, ObjectParameter errorCode)
        {
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Manufacturer_SelectOne1_Result>("usp_Manufacturer_SelectOne1", manufacturerIDParameter, errorCode);
        }
    
        public virtual int usp_Manufacturer_Update(Nullable<int> manufacturerID, string manufacturerName, string manufacturerNameEn, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var manufacturerNameEnParameter = manufacturerNameEn != null ?
                new ObjectParameter("ManufacturerNameEn", manufacturerNameEn) :
                new ObjectParameter("ManufacturerNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Manufacturer_Update", manufacturerIDParameter, manufacturerNameParameter, manufacturerNameEnParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Manufacturer_Update1(Nullable<int> manufacturerID, string manufacturerName, string manufacturerNameEn, string convertedManufacturerName, string manufacturerImage, Nullable<bool> isAvailable, Nullable<int> priority, Nullable<int> productID, string content, string contentEn, ObjectParameter errorCode)
        {
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var manufacturerNameEnParameter = manufacturerNameEn != null ?
                new ObjectParameter("ManufacturerNameEn", manufacturerNameEn) :
                new ObjectParameter("ManufacturerNameEn", typeof(string));
    
            var convertedManufacturerNameParameter = convertedManufacturerName != null ?
                new ObjectParameter("ConvertedManufacturerName", convertedManufacturerName) :
                new ObjectParameter("ConvertedManufacturerName", typeof(string));
    
            var manufacturerImageParameter = manufacturerImage != null ?
                new ObjectParameter("ManufacturerImage", manufacturerImage) :
                new ObjectParameter("ManufacturerImage", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Manufacturer_Update1", manufacturerIDParameter, manufacturerNameParameter, manufacturerNameEnParameter, convertedManufacturerNameParameter, manufacturerImageParameter, isAvailableParameter, priorityParameter, productIDParameter, contentParameter, contentEnParameter, errorCode);
        }
    
        public virtual int usp_ManufacturerImage_Delete(Nullable<int> manufacturerID, ObjectParameter errorCode)
        {
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ManufacturerImage_Delete", manufacturerIDParameter, errorCode);
        }
    
        public virtual int usp_Menu_Delete(Nullable<int> menuID, ObjectParameter errorCode)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Menu_Delete", menuIDParameter, errorCode);
        }
    
        public virtual int usp_Menu_DownOrder(Nullable<int> menuID, ObjectParameter errorCode)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Menu_DownOrder", menuIDParameter, errorCode);
        }
    
        public virtual int usp_Menu_Insert(string imageName, string imageNameEn, string menuTitle, string menuTitleEn, string link, string linkEn, Nullable<int> menuPositionID, Nullable<int> parentID, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var imageNameEnParameter = imageNameEn != null ?
                new ObjectParameter("ImageNameEn", imageNameEn) :
                new ObjectParameter("ImageNameEn", typeof(string));
    
            var menuTitleParameter = menuTitle != null ?
                new ObjectParameter("MenuTitle", menuTitle) :
                new ObjectParameter("MenuTitle", typeof(string));
    
            var menuTitleEnParameter = menuTitleEn != null ?
                new ObjectParameter("MenuTitleEn", menuTitleEn) :
                new ObjectParameter("MenuTitleEn", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var linkEnParameter = linkEn != null ?
                new ObjectParameter("LinkEn", linkEn) :
                new ObjectParameter("LinkEn", typeof(string));
    
            var menuPositionIDParameter = menuPositionID.HasValue ?
                new ObjectParameter("MenuPositionID", menuPositionID) :
                new ObjectParameter("MenuPositionID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Menu_Insert", imageNameParameter, imageNameEnParameter, menuTitleParameter, menuTitleEnParameter, linkParameter, linkEnParameter, menuPositionIDParameter, parentIDParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_Menu_IsChildrenExist(Nullable<int> menuID, ObjectParameter errorCode)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_Menu_IsChildrenExist", menuIDParameter, errorCode);
        }
    
        public virtual int usp_Menu_QuickUpdate(Nullable<int> menuID, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Menu_QuickUpdate", menuIDParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_Menu_SelectAll(Nullable<int> menuPositionID, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var menuPositionIDParameter = menuPositionID.HasValue ?
                new ObjectParameter("MenuPositionID", menuPositionID) :
                new ObjectParameter("MenuPositionID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Menu_SelectAll", menuPositionIDParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Menu_SelectOne_Result> usp_Menu_SelectOne(Nullable<int> menuID, ObjectParameter errorCode)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Menu_SelectOne_Result>("usp_Menu_SelectOne", menuIDParameter, errorCode);
        }
    
        public virtual int usp_Menu_Update(Nullable<int> menuID, string imageName, string imageNameEn, string menuTitle, string menuTitleEn, string link, string linkEn, Nullable<int> menuPositionID, Nullable<int> parentID, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var imageNameEnParameter = imageNameEn != null ?
                new ObjectParameter("ImageNameEn", imageNameEn) :
                new ObjectParameter("ImageNameEn", typeof(string));
    
            var menuTitleParameter = menuTitle != null ?
                new ObjectParameter("MenuTitle", menuTitle) :
                new ObjectParameter("MenuTitle", typeof(string));
    
            var menuTitleEnParameter = menuTitleEn != null ?
                new ObjectParameter("MenuTitleEn", menuTitleEn) :
                new ObjectParameter("MenuTitleEn", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var linkEnParameter = linkEn != null ?
                new ObjectParameter("LinkEn", linkEn) :
                new ObjectParameter("LinkEn", typeof(string));
    
            var menuPositionIDParameter = menuPositionID.HasValue ?
                new ObjectParameter("MenuPositionID", menuPositionID) :
                new ObjectParameter("MenuPositionID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Menu_Update", menuIDParameter, imageNameParameter, imageNameEnParameter, menuTitleParameter, menuTitleEnParameter, linkParameter, linkEnParameter, menuPositionIDParameter, parentIDParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_Menu_UpOrder(Nullable<int> menuID, ObjectParameter errorCode)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Menu_UpOrder", menuIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_MenuForEdit_SelectAll_Result> usp_MenuForEdit_SelectAll(Nullable<int> menuID, ObjectParameter errorCode)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MenuForEdit_SelectAll_Result>("usp_MenuForEdit_SelectAll", menuIDParameter, errorCode);
        }
    
        public virtual int usp_MenuPosition_Delete(Nullable<int> menuPositionID, ObjectParameter errorCode)
        {
            var menuPositionIDParameter = menuPositionID.HasValue ?
                new ObjectParameter("MenuPositionID", menuPositionID) :
                new ObjectParameter("MenuPositionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MenuPosition_Delete", menuPositionIDParameter, errorCode);
        }
    
        public virtual int usp_MenuPosition_Insert(string menuPositionName, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var menuPositionNameParameter = menuPositionName != null ?
                new ObjectParameter("MenuPositionName", menuPositionName) :
                new ObjectParameter("MenuPositionName", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MenuPosition_Insert", menuPositionNameParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_MenuPosition_SelectAll(Nullable<int> menuPositionID, string menuPositionName, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var menuPositionIDParameter = menuPositionID.HasValue ?
                new ObjectParameter("MenuPositionID", menuPositionID) :
                new ObjectParameter("MenuPositionID", typeof(int));
    
            var menuPositionNameParameter = menuPositionName != null ?
                new ObjectParameter("MenuPositionName", menuPositionName) :
                new ObjectParameter("MenuPositionName", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MenuPosition_SelectAll", menuPositionIDParameter, menuPositionNameParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_MenuPosition_SelectOne_Result> usp_MenuPosition_SelectOne(Nullable<int> menuPositionID, ObjectParameter errorCode)
        {
            var menuPositionIDParameter = menuPositionID.HasValue ?
                new ObjectParameter("MenuPositionID", menuPositionID) :
                new ObjectParameter("MenuPositionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MenuPosition_SelectOne_Result>("usp_MenuPosition_SelectOne", menuPositionIDParameter, errorCode);
        }
    
        public virtual int usp_MenuPosition_Update(Nullable<int> menuPositionID, string menuPositionName, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var menuPositionIDParameter = menuPositionID.HasValue ?
                new ObjectParameter("MenuPositionID", menuPositionID) :
                new ObjectParameter("MenuPositionID", typeof(int));
    
            var menuPositionNameParameter = menuPositionName != null ?
                new ObjectParameter("MenuPositionName", menuPositionName) :
                new ObjectParameter("MenuPositionName", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MenuPosition_Update", menuPositionIDParameter, menuPositionNameParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_NewerArticle_SelectAll(Nullable<int> rerultCount, Nullable<int> articleID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_NewerArticle_SelectAll", rerultCountParameter, articleIDParameter, errorCode);
        }
    
        public virtual int usp_NewerCareer_SelectAll(Nullable<int> rerultCount, Nullable<int> careerID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var careerIDParameter = careerID.HasValue ?
                new ObjectParameter("CareerID", careerID) :
                new ObjectParameter("CareerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_NewerCareer_SelectAll", rerultCountParameter, careerIDParameter, errorCode);
        }
    
        public virtual int usp_NewerProject_SelectAll(Nullable<int> rerultCount, Nullable<int> projectID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_NewerProject_SelectAll", rerultCountParameter, projectIDParameter, errorCode);
        }
    
        public virtual int usp_NewerService_SelectAll(Nullable<int> rerultCount, Nullable<int> serviceID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_NewerService_SelectAll", rerultCountParameter, serviceIDParameter, errorCode);
        }
    
        public virtual int usp_Newsletter_Delete(string email, ObjectParameter errorCode)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Newsletter_Delete", emailParameter, errorCode);
        }
    
        public virtual int usp_Newsletter_Insert(string email, ObjectParameter errorCode)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Newsletter_Insert", emailParameter, errorCode);
        }
    
        public virtual int usp_Newsletter_SelectAll(string email, ObjectParameter errorCode)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Newsletter_SelectAll", emailParameter, errorCode);
        }
    
        public virtual ObjectResult<string> usp_Newsletter_SelectOne(string email, ObjectParameter errorCode)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_Newsletter_SelectOne", emailParameter, errorCode);
        }
    
        public virtual int usp_Newsletter_Update(string email, ObjectParameter errorCode)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Newsletter_Update", emailParameter, errorCode);
        }
    
        public virtual int usp_OlderArticle_SelectAll(Nullable<int> rerultCount, Nullable<int> articleID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OlderArticle_SelectAll", rerultCountParameter, articleIDParameter, errorCode);
        }
    
        public virtual int usp_OlderCareer_SelectAll(Nullable<int> rerultCount, Nullable<int> careerID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var careerIDParameter = careerID.HasValue ?
                new ObjectParameter("CareerID", careerID) :
                new ObjectParameter("CareerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OlderCareer_SelectAll", rerultCountParameter, careerIDParameter, errorCode);
        }
    
        public virtual int usp_OlderProject_SelectAll(Nullable<int> rerultCount, Nullable<int> projectID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OlderProject_SelectAll", rerultCountParameter, projectIDParameter, errorCode);
        }
    
        public virtual int usp_OlderService_SelectAll(Nullable<int> rerultCount, Nullable<int> serviceID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OlderService_SelectAll", rerultCountParameter, serviceIDParameter, errorCode);
        }
    
        public virtual int usp_OrderDetail_Delete(Nullable<int> orderDetailID, ObjectParameter errorCode)
        {
            var orderDetailIDParameter = orderDetailID.HasValue ?
                new ObjectParameter("OrderDetailID", orderDetailID) :
                new ObjectParameter("OrderDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderDetail_Delete", orderDetailIDParameter, errorCode);
        }
    
        public virtual int usp_OrderDetail_Insert(string orderID, Nullable<int> productID, Nullable<int> quantity, Nullable<decimal> price, string createBy, string productColorName, string productColorNameEn, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var productColorNameParameter = productColorName != null ?
                new ObjectParameter("ProductColorName", productColorName) :
                new ObjectParameter("ProductColorName", typeof(string));
    
            var productColorNameEnParameter = productColorNameEn != null ?
                new ObjectParameter("ProductColorNameEn", productColorNameEn) :
                new ObjectParameter("ProductColorNameEn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderDetail_Insert", orderIDParameter, productIDParameter, quantityParameter, priceParameter, createByParameter, productColorNameParameter, productColorNameEnParameter, errorCode);
        }
    
        public virtual int usp_OrderDetail_Insert1(string orderID, Nullable<int> productID, Nullable<int> quantity, Nullable<decimal> price, string createBy, string productColorName, string productColorNameEn, string email, string productCode, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var productColorNameParameter = productColorName != null ?
                new ObjectParameter("ProductColorName", productColorName) :
                new ObjectParameter("ProductColorName", typeof(string));
    
            var productColorNameEnParameter = productColorNameEn != null ?
                new ObjectParameter("ProductColorNameEn", productColorNameEn) :
                new ObjectParameter("ProductColorNameEn", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderDetail_Insert1", orderIDParameter, productIDParameter, quantityParameter, priceParameter, createByParameter, productColorNameParameter, productColorNameEnParameter, emailParameter, productCodeParameter, errorCode);
        }
    
        public virtual int usp_OrderDetail_SelectAll(Nullable<int> orderDetailID, string orderID, Nullable<int> productID, string productName, string description, Nullable<int> quantity, Nullable<decimal> price, string type, string createBy, Nullable<System.DateTime> createDate, ObjectParameter errorCode)
        {
            var orderDetailIDParameter = orderDetailID.HasValue ?
                new ObjectParameter("OrderDetailID", orderDetailID) :
                new ObjectParameter("OrderDetailID", typeof(int));
    
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderDetail_SelectAll", orderDetailIDParameter, orderIDParameter, productIDParameter, productNameParameter, descriptionParameter, quantityParameter, priceParameter, typeParameter, createByParameter, createDateParameter, errorCode);
        }
    
        public virtual int usp_OrderDetail_SelectAll1(Nullable<int> orderDetailID, string orderID, Nullable<int> productID, string productName, string description, Nullable<int> quantity, Nullable<decimal> price, string type, string createBy, Nullable<System.DateTime> createDate, string email, ObjectParameter errorCode)
        {
            var orderDetailIDParameter = orderDetailID.HasValue ?
                new ObjectParameter("OrderDetailID", orderDetailID) :
                new ObjectParameter("OrderDetailID", typeof(int));
    
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderDetail_SelectAll1", orderDetailIDParameter, orderIDParameter, productIDParameter, productNameParameter, descriptionParameter, quantityParameter, priceParameter, typeParameter, createByParameter, createDateParameter, emailParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_OrderDetail_SelectOne_Result> usp_OrderDetail_SelectOne(Nullable<int> orderDetailID, ObjectParameter errorCode)
        {
            var orderDetailIDParameter = orderDetailID.HasValue ?
                new ObjectParameter("OrderDetailID", orderDetailID) :
                new ObjectParameter("OrderDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrderDetail_SelectOne_Result>("usp_OrderDetail_SelectOne", orderDetailIDParameter, errorCode);
        }
    
        public virtual int usp_OrderDetail_Update(Nullable<int> orderDetailID, string orderID, Nullable<int> productID, Nullable<int> quantity, Nullable<decimal> price, ObjectParameter errorCode)
        {
            var orderDetailIDParameter = orderDetailID.HasValue ?
                new ObjectParameter("OrderDetailID", orderDetailID) :
                new ObjectParameter("OrderDetailID", typeof(int));
    
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderDetail_Update", orderDetailIDParameter, orderIDParameter, productIDParameter, quantityParameter, priceParameter, errorCode);
        }
    
        public virtual int usp_Orders_Delete(string orderID, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_Delete", orderIDParameter, errorCode);
        }
    
        public virtual int usp_Orders_Insert(string orderID, string userName, Nullable<int> orderStatusID, Nullable<int> shippingStatusID, string paymentMethodID, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, string notes, Nullable<decimal> commission, Nullable<int> deliveryMethodsID, Nullable<System.DateTime> deliveryDate, string deliveryAddress, Nullable<int> serviceID, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(decimal));
    
            var deliveryMethodsIDParameter = deliveryMethodsID.HasValue ?
                new ObjectParameter("DeliveryMethodsID", deliveryMethodsID) :
                new ObjectParameter("DeliveryMethodsID", typeof(int));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var deliveryAddressParameter = deliveryAddress != null ?
                new ObjectParameter("DeliveryAddress", deliveryAddress) :
                new ObjectParameter("DeliveryAddress", typeof(string));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_Insert", orderIDParameter, userNameParameter, orderStatusIDParameter, shippingStatusIDParameter, paymentMethodIDParameter, billingAddressIDParameter, shippingAddressIDParameter, notesParameter, commissionParameter, deliveryMethodsIDParameter, deliveryDateParameter, deliveryAddressParameter, serviceIDParameter, errorCode);
        }
    
        public virtual int usp_Orders_Insert1(string orderID, string userName, Nullable<int> orderStatusID, Nullable<int> shippingStatusID, string paymentMethodID, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, string notes, Nullable<decimal> commission, Nullable<int> deliveryMethodsID, Nullable<System.DateTime> deliveryDate, string deliveryAddress, Nullable<int> serviceID, string email, ObjectParameter outOrderID, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(decimal));
    
            var deliveryMethodsIDParameter = deliveryMethodsID.HasValue ?
                new ObjectParameter("DeliveryMethodsID", deliveryMethodsID) :
                new ObjectParameter("DeliveryMethodsID", typeof(int));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var deliveryAddressParameter = deliveryAddress != null ?
                new ObjectParameter("DeliveryAddress", deliveryAddress) :
                new ObjectParameter("DeliveryAddress", typeof(string));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_Insert1", orderIDParameter, userNameParameter, orderStatusIDParameter, shippingStatusIDParameter, paymentMethodIDParameter, billingAddressIDParameter, shippingAddressIDParameter, notesParameter, commissionParameter, deliveryMethodsIDParameter, deliveryDateParameter, deliveryAddressParameter, serviceIDParameter, emailParameter, outOrderID, errorCode);
        }
    
        public virtual int usp_Orders_IsCancel(string orderID, Nullable<int> orderStatusID, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_IsCancel", orderIDParameter, orderStatusIDParameter, errorCode);
        }
    
        public virtual int usp_Orders_QuickUpdate(string orderID, string userName, Nullable<int> orderStatusID, Nullable<int> shippingStatusID, string paymentMethodID, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, string notes, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_QuickUpdate", orderIDParameter, userNameParameter, orderStatusIDParameter, shippingStatusIDParameter, paymentMethodIDParameter, billingAddressIDParameter, shippingAddressIDParameter, notesParameter, errorCode);
        }
    
        public virtual int usp_Orders_QuickUpdate_PayStatus(string orderID, Nullable<int> payStatusID, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var payStatusIDParameter = payStatusID.HasValue ?
                new ObjectParameter("PayStatusID", payStatusID) :
                new ObjectParameter("PayStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_QuickUpdate_PayStatus", orderIDParameter, payStatusIDParameter, errorCode);
        }
    
        public virtual int usp_Orders_QuickUpdate1(string orderID, string userName, Nullable<int> orderStatusID, Nullable<int> shippingStatusID, string paymentMethodID, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, string notes, Nullable<int> payStatusID, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var payStatusIDParameter = payStatusID.HasValue ?
                new ObjectParameter("PayStatusID", payStatusID) :
                new ObjectParameter("PayStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_QuickUpdate1", orderIDParameter, userNameParameter, orderStatusIDParameter, shippingStatusIDParameter, paymentMethodIDParameter, billingAddressIDParameter, shippingAddressIDParameter, notesParameter, payStatusIDParameter, errorCode);
        }
    
        public virtual int usp_Orders_SelectAll(string orderID, string userName, Nullable<int> orderStatusID, Nullable<int> shippingStatusID, string paymentMethodID, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, string notes, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> provinceID, Nullable<int> districtID, Nullable<int> serviceID, Nullable<int> customerAddressID, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var customerAddressIDParameter = customerAddressID.HasValue ?
                new ObjectParameter("CustomerAddressID", customerAddressID) :
                new ObjectParameter("CustomerAddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_SelectAll", orderIDParameter, userNameParameter, orderStatusIDParameter, shippingStatusIDParameter, paymentMethodIDParameter, billingAddressIDParameter, shippingAddressIDParameter, notesParameter, fromDateParameter, toDateParameter, provinceIDParameter, districtIDParameter, serviceIDParameter, customerAddressIDParameter, errorCode);
        }
    
        public virtual int usp_Orders_SelectAll_NoUser(string orderID, string userName, Nullable<int> orderStatusID, Nullable<int> shippingStatusID, string paymentMethodID, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, string notes, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> provinceID, Nullable<int> districtID, Nullable<int> serviceID, Nullable<int> customerAddressID, string email, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var customerAddressIDParameter = customerAddressID.HasValue ?
                new ObjectParameter("CustomerAddressID", customerAddressID) :
                new ObjectParameter("CustomerAddressID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_SelectAll_NoUser", orderIDParameter, userNameParameter, orderStatusIDParameter, shippingStatusIDParameter, paymentMethodIDParameter, billingAddressIDParameter, shippingAddressIDParameter, notesParameter, fromDateParameter, toDateParameter, provinceIDParameter, districtIDParameter, serviceIDParameter, customerAddressIDParameter, emailParameter, errorCode);
        }
    
        public virtual int usp_Orders_SelectAll1(string orderID, string userName, Nullable<int> orderStatusID, Nullable<int> shippingStatusID, string paymentMethodID, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, string notes, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> provinceID, Nullable<int> districtID, Nullable<int> serviceID, Nullable<int> customerAddressID, string email, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var customerAddressIDParameter = customerAddressID.HasValue ?
                new ObjectParameter("CustomerAddressID", customerAddressID) :
                new ObjectParameter("CustomerAddressID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_SelectAll1", orderIDParameter, userNameParameter, orderStatusIDParameter, shippingStatusIDParameter, paymentMethodIDParameter, billingAddressIDParameter, shippingAddressIDParameter, notesParameter, fromDateParameter, toDateParameter, provinceIDParameter, districtIDParameter, serviceIDParameter, customerAddressIDParameter, emailParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Orders_SelectOne_Result> usp_Orders_SelectOne(string orderID, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Orders_SelectOne_Result>("usp_Orders_SelectOne", orderIDParameter, errorCode);
        }
    
        public virtual int usp_Orders_Update(string orderID, string userName, Nullable<int> orderStatusID, Nullable<int> shippingStatusID, string paymentMethodID, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, string notes, Nullable<int> deliveryMethodsID, Nullable<System.DateTime> deliveryDate, string deliveryAddress, Nullable<int> serviceID, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var deliveryMethodsIDParameter = deliveryMethodsID.HasValue ?
                new ObjectParameter("DeliveryMethodsID", deliveryMethodsID) :
                new ObjectParameter("DeliveryMethodsID", typeof(int));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var deliveryAddressParameter = deliveryAddress != null ?
                new ObjectParameter("DeliveryAddress", deliveryAddress) :
                new ObjectParameter("DeliveryAddress", typeof(string));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_Update", orderIDParameter, userNameParameter, orderStatusIDParameter, shippingStatusIDParameter, paymentMethodIDParameter, billingAddressIDParameter, shippingAddressIDParameter, notesParameter, deliveryMethodsIDParameter, deliveryDateParameter, deliveryAddressParameter, serviceIDParameter, errorCode);
        }
    
        public virtual int usp_Orders_Update1(string orderID, string userName, Nullable<int> orderStatusID, Nullable<int> shippingStatusID, string paymentMethodID, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, string notes, Nullable<int> deliveryMethodsID, Nullable<System.DateTime> deliveryDate, string deliveryAddress, Nullable<int> serviceID, string email, ObjectParameter errorCode)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var deliveryMethodsIDParameter = deliveryMethodsID.HasValue ?
                new ObjectParameter("DeliveryMethodsID", deliveryMethodsID) :
                new ObjectParameter("DeliveryMethodsID", typeof(int));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var deliveryAddressParameter = deliveryAddress != null ?
                new ObjectParameter("DeliveryAddress", deliveryAddress) :
                new ObjectParameter("DeliveryAddress", typeof(string));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Orders_Update1", orderIDParameter, userNameParameter, orderStatusIDParameter, shippingStatusIDParameter, paymentMethodIDParameter, billingAddressIDParameter, shippingAddressIDParameter, notesParameter, deliveryMethodsIDParameter, deliveryDateParameter, deliveryAddressParameter, serviceIDParameter, emailParameter, errorCode);
        }
    
        public virtual int usp_OrderStatus_Delete(Nullable<int> orderStatusID, ObjectParameter errorCode)
        {
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderStatus_Delete", orderStatusIDParameter, errorCode);
        }
    
        public virtual int usp_OrderStatus_Insert(string orderStatusName, string orderStatusNameEn, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var orderStatusNameParameter = orderStatusName != null ?
                new ObjectParameter("OrderStatusName", orderStatusName) :
                new ObjectParameter("OrderStatusName", typeof(string));
    
            var orderStatusNameEnParameter = orderStatusNameEn != null ?
                new ObjectParameter("OrderStatusNameEn", orderStatusNameEn) :
                new ObjectParameter("OrderStatusNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderStatus_Insert", orderStatusNameParameter, orderStatusNameEnParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_OrderStatus_SelectAll(Nullable<int> orderStatusID, string orderStatusName, string orderStatusNameEn, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var orderStatusNameParameter = orderStatusName != null ?
                new ObjectParameter("OrderStatusName", orderStatusName) :
                new ObjectParameter("OrderStatusName", typeof(string));
    
            var orderStatusNameEnParameter = orderStatusNameEn != null ?
                new ObjectParameter("OrderStatusNameEn", orderStatusNameEn) :
                new ObjectParameter("OrderStatusNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderStatus_SelectAll", orderStatusIDParameter, orderStatusNameParameter, orderStatusNameEnParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_OrderStatus_SelectOne_Result> usp_OrderStatus_SelectOne(Nullable<int> orderStatusID, ObjectParameter errorCode)
        {
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrderStatus_SelectOne_Result>("usp_OrderStatus_SelectOne", orderStatusIDParameter, errorCode);
        }
    
        public virtual int usp_OrderStatus_Update(Nullable<int> orderStatusID, string orderStatusName, string orderStatusNameEn, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var orderStatusNameParameter = orderStatusName != null ?
                new ObjectParameter("OrderStatusName", orderStatusName) :
                new ObjectParameter("OrderStatusName", typeof(string));
    
            var orderStatusNameEnParameter = orderStatusNameEn != null ?
                new ObjectParameter("OrderStatusNameEn", orderStatusNameEn) :
                new ObjectParameter("OrderStatusNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderStatus_Update", orderStatusIDParameter, orderStatusNameParameter, orderStatusNameEnParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_Origin_Delete(Nullable<int> originID, ObjectParameter errorCode)
        {
            var originIDParameter = originID.HasValue ?
                new ObjectParameter("OriginID", originID) :
                new ObjectParameter("OriginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Origin_Delete", originIDParameter, errorCode);
        }
    
        public virtual int usp_Origin_Insert(string originName, string originNameEn, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var originNameParameter = originName != null ?
                new ObjectParameter("OriginName", originName) :
                new ObjectParameter("OriginName", typeof(string));
    
            var originNameEnParameter = originNameEn != null ?
                new ObjectParameter("OriginNameEn", originNameEn) :
                new ObjectParameter("OriginNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Origin_Insert", originNameParameter, originNameEnParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Origin_QuickUpdate(Nullable<int> originID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var originIDParameter = originID.HasValue ?
                new ObjectParameter("OriginID", originID) :
                new ObjectParameter("OriginID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Origin_QuickUpdate", originIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Origin_SelectAll(string originName, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var originNameParameter = originName != null ?
                new ObjectParameter("OriginName", originName) :
                new ObjectParameter("OriginName", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Origin_SelectAll", originNameParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Origin_SelectOne_Result> usp_Origin_SelectOne(Nullable<int> originID, ObjectParameter errorCode)
        {
            var originIDParameter = originID.HasValue ?
                new ObjectParameter("OriginID", originID) :
                new ObjectParameter("OriginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Origin_SelectOne_Result>("usp_Origin_SelectOne", originIDParameter, errorCode);
        }
    
        public virtual int usp_Origin_Update(Nullable<int> originID, string originName, string originNameEn, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var originIDParameter = originID.HasValue ?
                new ObjectParameter("OriginID", originID) :
                new ObjectParameter("OriginID", typeof(int));
    
            var originNameParameter = originName != null ?
                new ObjectParameter("OriginName", originName) :
                new ObjectParameter("OriginName", typeof(string));
    
            var originNameEnParameter = originNameEn != null ?
                new ObjectParameter("OriginNameEn", originNameEn) :
                new ObjectParameter("OriginNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Origin_Update", originIDParameter, originNameParameter, originNameEnParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Partner_Delete(Nullable<int> partnerID, ObjectParameter errorCode)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Partner_Delete", partnerIDParameter, errorCode);
        }
    
        public virtual int usp_Partner_Insert(string partnerName, string partnerNameEn, string convertedPartnerName, string partnerImage, string address, string linkWebsite, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var partnerNameEnParameter = partnerNameEn != null ?
                new ObjectParameter("PartnerNameEn", partnerNameEn) :
                new ObjectParameter("PartnerNameEn", typeof(string));
    
            var convertedPartnerNameParameter = convertedPartnerName != null ?
                new ObjectParameter("ConvertedPartnerName", convertedPartnerName) :
                new ObjectParameter("ConvertedPartnerName", typeof(string));
    
            var partnerImageParameter = partnerImage != null ?
                new ObjectParameter("PartnerImage", partnerImage) :
                new ObjectParameter("PartnerImage", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var linkWebsiteParameter = linkWebsite != null ?
                new ObjectParameter("LinkWebsite", linkWebsite) :
                new ObjectParameter("LinkWebsite", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Partner_Insert", partnerNameParameter, partnerNameEnParameter, convertedPartnerNameParameter, partnerImageParameter, addressParameter, linkWebsiteParameter, isAvailableParameter, priorityParameter, outImageName, errorCode);
        }
    
        public virtual int usp_Partner_QuickUpdate(Nullable<int> partnerID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Partner_QuickUpdate", partnerIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Partner_SelectAll(string keyword, string partnerName, string address, string linkWebsite, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var linkWebsiteParameter = linkWebsite != null ?
                new ObjectParameter("LinkWebsite", linkWebsite) :
                new ObjectParameter("LinkWebsite", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Partner_SelectAll", keywordParameter, partnerNameParameter, addressParameter, linkWebsiteParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Partner_SelectOne_Result> usp_Partner_SelectOne(Nullable<int> partnerID, ObjectParameter errorCode)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Partner_SelectOne_Result>("usp_Partner_SelectOne", partnerIDParameter, errorCode);
        }
    
        public virtual int usp_Partner_Update(Nullable<int> partnerID, string partnerName, string partnerNameEn, string convertedPartnerName, string partnerImage, string address, string linkWebsite, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var partnerNameEnParameter = partnerNameEn != null ?
                new ObjectParameter("PartnerNameEn", partnerNameEn) :
                new ObjectParameter("PartnerNameEn", typeof(string));
    
            var convertedPartnerNameParameter = convertedPartnerName != null ?
                new ObjectParameter("ConvertedPartnerName", convertedPartnerName) :
                new ObjectParameter("ConvertedPartnerName", typeof(string));
    
            var partnerImageParameter = partnerImage != null ?
                new ObjectParameter("PartnerImage", partnerImage) :
                new ObjectParameter("PartnerImage", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var linkWebsiteParameter = linkWebsite != null ?
                new ObjectParameter("LinkWebsite", linkWebsite) :
                new ObjectParameter("LinkWebsite", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Partner_Update", partnerIDParameter, partnerNameParameter, partnerNameEnParameter, convertedPartnerNameParameter, partnerImageParameter, addressParameter, linkWebsiteParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_PartnerImage_Delete(Nullable<int> partnerID, ObjectParameter errorCode)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PartnerImage_Delete", partnerIDParameter, errorCode);
        }
    
        public virtual int usp_PaymentMethod_Delete(string paymentMethodID, ObjectParameter errorCode)
        {
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PaymentMethod_Delete", paymentMethodIDParameter, errorCode);
        }
    
        public virtual int usp_PaymentMethod_Insert(string paymentMethodName, ObjectParameter errorCode)
        {
            var paymentMethodNameParameter = paymentMethodName != null ?
                new ObjectParameter("PaymentMethodName", paymentMethodName) :
                new ObjectParameter("PaymentMethodName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PaymentMethod_Insert", paymentMethodNameParameter, errorCode);
        }
    
        public virtual int usp_PaymentMethod_SelectAll(string paymentMethodID, string paymentMethodName, ObjectParameter errorCode)
        {
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            var paymentMethodNameParameter = paymentMethodName != null ?
                new ObjectParameter("PaymentMethodName", paymentMethodName) :
                new ObjectParameter("PaymentMethodName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PaymentMethod_SelectAll", paymentMethodIDParameter, paymentMethodNameParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_PaymentMethod_SelectOne_Result> usp_PaymentMethod_SelectOne(string paymentMethodID, ObjectParameter errorCode)
        {
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentMethod_SelectOne_Result>("usp_PaymentMethod_SelectOne", paymentMethodIDParameter, errorCode);
        }
    
        public virtual int usp_PaymentMethod_Update(string paymentMethodID, string paymentMethodName, ObjectParameter errorCode)
        {
            var paymentMethodIDParameter = paymentMethodID != null ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(string));
    
            var paymentMethodNameParameter = paymentMethodName != null ?
                new ObjectParameter("PaymentMethodName", paymentMethodName) :
                new ObjectParameter("PaymentMethodName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PaymentMethod_Update", paymentMethodIDParameter, paymentMethodNameParameter, errorCode);
        }
    
        public virtual int usp_PayStatus_Delete(Nullable<int> payStatusID, ObjectParameter errorCode)
        {
            var payStatusIDParameter = payStatusID.HasValue ?
                new ObjectParameter("PayStatusID", payStatusID) :
                new ObjectParameter("PayStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayStatus_Delete", payStatusIDParameter, errorCode);
        }
    
        public virtual int usp_PayStatus_SelectAll(Nullable<int> payStatusID, string payStatusName, string payStatusNameEn, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var payStatusIDParameter = payStatusID.HasValue ?
                new ObjectParameter("PayStatusID", payStatusID) :
                new ObjectParameter("PayStatusID", typeof(int));
    
            var payStatusNameParameter = payStatusName != null ?
                new ObjectParameter("PayStatusName", payStatusName) :
                new ObjectParameter("PayStatusName", typeof(string));
    
            var payStatusNameEnParameter = payStatusNameEn != null ?
                new ObjectParameter("PayStatusNameEn", payStatusNameEn) :
                new ObjectParameter("PayStatusNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayStatus_SelectAll", payStatusIDParameter, payStatusNameParameter, payStatusNameEnParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_PayStatus_SelectOne_Result> usp_PayStatus_SelectOne(Nullable<int> payStatusID, ObjectParameter errorCode)
        {
            var payStatusIDParameter = payStatusID.HasValue ?
                new ObjectParameter("PayStatusID", payStatusID) :
                new ObjectParameter("PayStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PayStatus_SelectOne_Result>("usp_PayStatus_SelectOne", payStatusIDParameter, errorCode);
        }
    
        public virtual int usp_PayStatus_Update(Nullable<int> payStatusID, string payStatusName, string payStatusNameEn, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var payStatusIDParameter = payStatusID.HasValue ?
                new ObjectParameter("PayStatusID", payStatusID) :
                new ObjectParameter("PayStatusID", typeof(int));
    
            var payStatusNameParameter = payStatusName != null ?
                new ObjectParameter("PayStatusName", payStatusName) :
                new ObjectParameter("PayStatusName", typeof(string));
    
            var payStatusNameEnParameter = payStatusNameEn != null ?
                new ObjectParameter("PayStatusNameEn", payStatusNameEn) :
                new ObjectParameter("PayStatusNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayStatus_Update", payStatusIDParameter, payStatusNameParameter, payStatusNameEnParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_PhotoAlbum_Delete(Nullable<int> photoAlbumID, ObjectParameter errorCode)
        {
            var photoAlbumIDParameter = photoAlbumID.HasValue ?
                new ObjectParameter("PhotoAlbumID", photoAlbumID) :
                new ObjectParameter("PhotoAlbumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PhotoAlbum_Delete", photoAlbumIDParameter, errorCode);
        }
    
        public virtual int usp_PhotoAlbum_Insert(string imageName, string convertedTitle, string title, string descripttion, string titleEn, string descripttionEn, Nullable<int> photoAlbumCategoryID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var convertedTitleParameter = convertedTitle != null ?
                new ObjectParameter("ConvertedTitle", convertedTitle) :
                new ObjectParameter("ConvertedTitle", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descripttionParameter = descripttion != null ?
                new ObjectParameter("Descripttion", descripttion) :
                new ObjectParameter("Descripttion", typeof(string));
    
            var titleEnParameter = titleEn != null ?
                new ObjectParameter("TitleEn", titleEn) :
                new ObjectParameter("TitleEn", typeof(string));
    
            var descripttionEnParameter = descripttionEn != null ?
                new ObjectParameter("DescripttionEn", descripttionEn) :
                new ObjectParameter("DescripttionEn", typeof(string));
    
            var photoAlbumCategoryIDParameter = photoAlbumCategoryID.HasValue ?
                new ObjectParameter("PhotoAlbumCategoryID", photoAlbumCategoryID) :
                new ObjectParameter("PhotoAlbumCategoryID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PhotoAlbum_Insert", imageNameParameter, convertedTitleParameter, titleParameter, descripttionParameter, titleEnParameter, descripttionEnParameter, photoAlbumCategoryIDParameter, isAvailableParameter, priorityParameter, outImageName, errorCode);
        }
    
        public virtual int usp_PhotoAlbum_QuickUpdate(Nullable<int> photoAlbumID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var photoAlbumIDParameter = photoAlbumID.HasValue ?
                new ObjectParameter("PhotoAlbumID", photoAlbumID) :
                new ObjectParameter("PhotoAlbumID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PhotoAlbum_QuickUpdate", photoAlbumIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_PhotoAlbum_SelectAll(string keyword, string title, string descripttion, Nullable<int> photoAlbumCategoryID, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descripttionParameter = descripttion != null ?
                new ObjectParameter("Descripttion", descripttion) :
                new ObjectParameter("Descripttion", typeof(string));
    
            var photoAlbumCategoryIDParameter = photoAlbumCategoryID.HasValue ?
                new ObjectParameter("PhotoAlbumCategoryID", photoAlbumCategoryID) :
                new ObjectParameter("PhotoAlbumCategoryID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PhotoAlbum_SelectAll", keywordParameter, titleParameter, descripttionParameter, photoAlbumCategoryIDParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_PhotoAlbum_SelectOne_Result> usp_PhotoAlbum_SelectOne(Nullable<int> photoAlbumID, ObjectParameter errorCode)
        {
            var photoAlbumIDParameter = photoAlbumID.HasValue ?
                new ObjectParameter("PhotoAlbumID", photoAlbumID) :
                new ObjectParameter("PhotoAlbumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PhotoAlbum_SelectOne_Result>("usp_PhotoAlbum_SelectOne", photoAlbumIDParameter, errorCode);
        }
    
        public virtual int usp_PhotoAlbum_Update(Nullable<int> photoAlbumID, string imageName, string convertedTitle, string title, string descripttion, string titleEn, string descripttionEn, Nullable<int> photoAlbumCategoryID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var photoAlbumIDParameter = photoAlbumID.HasValue ?
                new ObjectParameter("PhotoAlbumID", photoAlbumID) :
                new ObjectParameter("PhotoAlbumID", typeof(int));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var convertedTitleParameter = convertedTitle != null ?
                new ObjectParameter("ConvertedTitle", convertedTitle) :
                new ObjectParameter("ConvertedTitle", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descripttionParameter = descripttion != null ?
                new ObjectParameter("Descripttion", descripttion) :
                new ObjectParameter("Descripttion", typeof(string));
    
            var titleEnParameter = titleEn != null ?
                new ObjectParameter("TitleEn", titleEn) :
                new ObjectParameter("TitleEn", typeof(string));
    
            var descripttionEnParameter = descripttionEn != null ?
                new ObjectParameter("DescripttionEn", descripttionEn) :
                new ObjectParameter("DescripttionEn", typeof(string));
    
            var photoAlbumCategoryIDParameter = photoAlbumCategoryID.HasValue ?
                new ObjectParameter("PhotoAlbumCategoryID", photoAlbumCategoryID) :
                new ObjectParameter("PhotoAlbumCategoryID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PhotoAlbum_Update", photoAlbumIDParameter, imageNameParameter, convertedTitleParameter, titleParameter, descripttionParameter, titleEnParameter, descripttionEnParameter, photoAlbumCategoryIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_PhotoAlbumCategory_Delete(Nullable<int> photoAlbumCategoryID, ObjectParameter errorCode)
        {
            var photoAlbumCategoryIDParameter = photoAlbumCategoryID.HasValue ?
                new ObjectParameter("PhotoAlbumCategoryID", photoAlbumCategoryID) :
                new ObjectParameter("PhotoAlbumCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PhotoAlbumCategory_Delete", photoAlbumCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_PhotoAlbumCategory_Insert(string imageName, string photoAlbumCategoryName, string photoAlbumCategoryNameEn, string convertedPhotoAlbumCategoryName, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter photoAlbumCategoryID, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var photoAlbumCategoryNameParameter = photoAlbumCategoryName != null ?
                new ObjectParameter("PhotoAlbumCategoryName", photoAlbumCategoryName) :
                new ObjectParameter("PhotoAlbumCategoryName", typeof(string));
    
            var photoAlbumCategoryNameEnParameter = photoAlbumCategoryNameEn != null ?
                new ObjectParameter("PhotoAlbumCategoryNameEn", photoAlbumCategoryNameEn) :
                new ObjectParameter("PhotoAlbumCategoryNameEn", typeof(string));
    
            var convertedPhotoAlbumCategoryNameParameter = convertedPhotoAlbumCategoryName != null ?
                new ObjectParameter("ConvertedPhotoAlbumCategoryName", convertedPhotoAlbumCategoryName) :
                new ObjectParameter("ConvertedPhotoAlbumCategoryName", typeof(string));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PhotoAlbumCategory_Insert", imageNameParameter, photoAlbumCategoryNameParameter, photoAlbumCategoryNameEnParameter, convertedPhotoAlbumCategoryNameParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, outImageName, photoAlbumCategoryID, errorCode);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_PhotoAlbumCategory_IsChildrenExist(Nullable<int> photoAlbumCategoryID, ObjectParameter errorCode)
        {
            var photoAlbumCategoryIDParameter = photoAlbumCategoryID.HasValue ?
                new ObjectParameter("PhotoAlbumCategoryID", photoAlbumCategoryID) :
                new ObjectParameter("PhotoAlbumCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_PhotoAlbumCategory_IsChildrenExist", photoAlbumCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_PhotoAlbumCategory_QuickUpdate(Nullable<int> photoAlbumCategoryID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var photoAlbumCategoryIDParameter = photoAlbumCategoryID.HasValue ?
                new ObjectParameter("PhotoAlbumCategoryID", photoAlbumCategoryID) :
                new ObjectParameter("PhotoAlbumCategoryID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PhotoAlbumCategory_QuickUpdate", photoAlbumCategoryIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_PhotoAlbumCategory_SelectAll(string photoAlbumCategoryName, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var photoAlbumCategoryNameParameter = photoAlbumCategoryName != null ?
                new ObjectParameter("PhotoAlbumCategoryName", photoAlbumCategoryName) :
                new ObjectParameter("PhotoAlbumCategoryName", typeof(string));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PhotoAlbumCategory_SelectAll", photoAlbumCategoryNameParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_PhotoAlbumCategory_SelectOne_Result> usp_PhotoAlbumCategory_SelectOne(Nullable<int> photoAlbumCategoryID, ObjectParameter errorCode)
        {
            var photoAlbumCategoryIDParameter = photoAlbumCategoryID.HasValue ?
                new ObjectParameter("PhotoAlbumCategoryID", photoAlbumCategoryID) :
                new ObjectParameter("PhotoAlbumCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PhotoAlbumCategory_SelectOne_Result>("usp_PhotoAlbumCategory_SelectOne", photoAlbumCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_PhotoAlbumCategory_Update(Nullable<int> photoAlbumCategoryID, string imageName, string photoAlbumCategoryName, string photoAlbumCategoryNameEn, string convertedPhotoAlbumCategoryName, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var photoAlbumCategoryIDParameter = photoAlbumCategoryID.HasValue ?
                new ObjectParameter("PhotoAlbumCategoryID", photoAlbumCategoryID) :
                new ObjectParameter("PhotoAlbumCategoryID", typeof(int));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var photoAlbumCategoryNameParameter = photoAlbumCategoryName != null ?
                new ObjectParameter("PhotoAlbumCategoryName", photoAlbumCategoryName) :
                new ObjectParameter("PhotoAlbumCategoryName", typeof(string));
    
            var photoAlbumCategoryNameEnParameter = photoAlbumCategoryNameEn != null ?
                new ObjectParameter("PhotoAlbumCategoryNameEn", photoAlbumCategoryNameEn) :
                new ObjectParameter("PhotoAlbumCategoryNameEn", typeof(string));
    
            var convertedPhotoAlbumCategoryNameParameter = convertedPhotoAlbumCategoryName != null ?
                new ObjectParameter("ConvertedPhotoAlbumCategoryName", convertedPhotoAlbumCategoryName) :
                new ObjectParameter("ConvertedPhotoAlbumCategoryName", typeof(string));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PhotoAlbumCategory_Update", photoAlbumCategoryIDParameter, imageNameParameter, photoAlbumCategoryNameParameter, photoAlbumCategoryNameEnParameter, convertedPhotoAlbumCategoryNameParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_PhotoAlbumCategoryImage_Delete(Nullable<int> photoAlbumCategoryID, ObjectParameter errorCode)
        {
            var photoAlbumCategoryIDParameter = photoAlbumCategoryID.HasValue ?
                new ObjectParameter("PhotoAlbumCategoryID", photoAlbumCategoryID) :
                new ObjectParameter("PhotoAlbumCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PhotoAlbumCategoryImage_Delete", photoAlbumCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_Product_Delete(Nullable<int> productID, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Product_Delete", productIDParameter, errorCode);
        }
    
        public virtual int usp_Product_Insert(string imageName, string metaTittle, string metaDescription, string productName, string convertedProductName, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string productNameEn, string descriptionEn, string contentEn, string tagEn, Nullable<decimal> price, string otherPrice, Nullable<decimal> savePrice, Nullable<short> discount, Nullable<int> categoryID, Nullable<int> manufacturerID, Nullable<int> originID, Nullable<bool> inStock, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isBestSeller, Nullable<bool> isSaleOff, Nullable<bool> isShowOnHomePage, Nullable<int> priority, Nullable<bool> isAvailable, ObjectParameter outImageName, ObjectParameter outProductID, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var convertedProductNameParameter = convertedProductName != null ?
                new ObjectParameter("ConvertedProductName", convertedProductName) :
                new ObjectParameter("ConvertedProductName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var productNameEnParameter = productNameEn != null ?
                new ObjectParameter("ProductNameEn", productNameEn) :
                new ObjectParameter("ProductNameEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var otherPriceParameter = otherPrice != null ?
                new ObjectParameter("OtherPrice", otherPrice) :
                new ObjectParameter("OtherPrice", typeof(string));
    
            var savePriceParameter = savePrice.HasValue ?
                new ObjectParameter("SavePrice", savePrice) :
                new ObjectParameter("SavePrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(short));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var originIDParameter = originID.HasValue ?
                new ObjectParameter("OriginID", originID) :
                new ObjectParameter("OriginID", typeof(int));
    
            var inStockParameter = inStock.HasValue ?
                new ObjectParameter("InStock", inStock) :
                new ObjectParameter("InStock", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isBestSellerParameter = isBestSeller.HasValue ?
                new ObjectParameter("IsBestSeller", isBestSeller) :
                new ObjectParameter("IsBestSeller", typeof(bool));
    
            var isSaleOffParameter = isSaleOff.HasValue ?
                new ObjectParameter("IsSaleOff", isSaleOff) :
                new ObjectParameter("IsSaleOff", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Product_Insert", imageNameParameter, metaTittleParameter, metaDescriptionParameter, productNameParameter, convertedProductNameParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, productNameEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, priceParameter, otherPriceParameter, savePriceParameter, discountParameter, categoryIDParameter, manufacturerIDParameter, originIDParameter, inStockParameter, isHotParameter, isNewParameter, isBestSellerParameter, isSaleOffParameter, isShowOnHomePageParameter, priorityParameter, isAvailableParameter, outImageName, outProductID, errorCode);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_Product_IsChildrenExist(Nullable<int> productID, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_Product_IsChildrenExist", productIDParameter, errorCode);
        }
    
        public virtual int usp_Product_QuickUpdate(Nullable<int> productID, Nullable<bool> inStock, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isBestSeller, Nullable<bool> isSaleOff, Nullable<bool> isShowOnHomePage, Nullable<int> priority, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var inStockParameter = inStock.HasValue ?
                new ObjectParameter("InStock", inStock) :
                new ObjectParameter("InStock", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isBestSellerParameter = isBestSeller.HasValue ?
                new ObjectParameter("IsBestSeller", isBestSeller) :
                new ObjectParameter("IsBestSeller", typeof(bool));
    
            var isSaleOffParameter = isSaleOff.HasValue ?
                new ObjectParameter("IsSaleOff", isSaleOff) :
                new ObjectParameter("IsSaleOff", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Product_QuickUpdate", productIDParameter, inStockParameter, isHotParameter, isNewParameter, isBestSellerParameter, isSaleOffParameter, isShowOnHomePageParameter, priorityParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_Product_SelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, string keyword, string productName, string description, Nullable<decimal> priceFrom, Nullable<decimal> priceTo, Nullable<int> categoryID, Nullable<int> manufacturerID, Nullable<int> originID, string tag, Nullable<bool> inStock, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isBestSeller, Nullable<bool> isSaleOff, Nullable<bool> isShowOnHomePage, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> priority, Nullable<bool> isAvailable, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priceFromParameter = priceFrom.HasValue ?
                new ObjectParameter("PriceFrom", priceFrom) :
                new ObjectParameter("PriceFrom", typeof(decimal));
    
            var priceToParameter = priceTo.HasValue ?
                new ObjectParameter("PriceTo", priceTo) :
                new ObjectParameter("PriceTo", typeof(decimal));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var originIDParameter = originID.HasValue ?
                new ObjectParameter("OriginID", originID) :
                new ObjectParameter("OriginID", typeof(int));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var inStockParameter = inStock.HasValue ?
                new ObjectParameter("InStock", inStock) :
                new ObjectParameter("InStock", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isBestSellerParameter = isBestSeller.HasValue ?
                new ObjectParameter("IsBestSeller", isBestSeller) :
                new ObjectParameter("IsBestSeller", typeof(bool));
    
            var isSaleOffParameter = isSaleOff.HasValue ?
                new ObjectParameter("IsSaleOff", isSaleOff) :
                new ObjectParameter("IsSaleOff", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Product_SelectAll", startRowIndexParameter, endRowIndexParameter, keywordParameter, productNameParameter, descriptionParameter, priceFromParameter, priceToParameter, categoryIDParameter, manufacturerIDParameter, originIDParameter, tagParameter, inStockParameter, isHotParameter, isNewParameter, isBestSellerParameter, isSaleOffParameter, isShowOnHomePageParameter, fromDateParameter, toDateParameter, priorityParameter, isAvailableParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Product_SelectOne_Result> usp_Product_SelectOne(Nullable<int> productID, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Product_SelectOne_Result>("usp_Product_SelectOne", productIDParameter, errorCode);
        }
    
        public virtual int usp_Product_Update(Nullable<int> productID, string metaTittle, string metaDescription, string imageName, string productName, string convertedProductName, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string productNameEn, string descriptionEn, string contentEn, string tagEn, Nullable<decimal> price, string otherPrice, Nullable<decimal> savePrice, Nullable<short> discount, Nullable<int> categoryID, Nullable<int> manufacturerID, Nullable<int> originID, Nullable<bool> inStock, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isBestSeller, Nullable<bool> isSaleOff, Nullable<bool> isShowOnHomePage, Nullable<int> priority, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var convertedProductNameParameter = convertedProductName != null ?
                new ObjectParameter("ConvertedProductName", convertedProductName) :
                new ObjectParameter("ConvertedProductName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var productNameEnParameter = productNameEn != null ?
                new ObjectParameter("ProductNameEn", productNameEn) :
                new ObjectParameter("ProductNameEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var otherPriceParameter = otherPrice != null ?
                new ObjectParameter("OtherPrice", otherPrice) :
                new ObjectParameter("OtherPrice", typeof(string));
    
            var savePriceParameter = savePrice.HasValue ?
                new ObjectParameter("SavePrice", savePrice) :
                new ObjectParameter("SavePrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(short));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var originIDParameter = originID.HasValue ?
                new ObjectParameter("OriginID", originID) :
                new ObjectParameter("OriginID", typeof(int));
    
            var inStockParameter = inStock.HasValue ?
                new ObjectParameter("InStock", inStock) :
                new ObjectParameter("InStock", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isBestSellerParameter = isBestSeller.HasValue ?
                new ObjectParameter("IsBestSeller", isBestSeller) :
                new ObjectParameter("IsBestSeller", typeof(bool));
    
            var isSaleOffParameter = isSaleOff.HasValue ?
                new ObjectParameter("IsSaleOff", isSaleOff) :
                new ObjectParameter("IsSaleOff", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Product_Update", productIDParameter, metaTittleParameter, metaDescriptionParameter, imageNameParameter, productNameParameter, convertedProductNameParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, productNameEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, priceParameter, otherPriceParameter, savePriceParameter, discountParameter, categoryIDParameter, manufacturerIDParameter, originIDParameter, inStockParameter, isHotParameter, isNewParameter, isBestSellerParameter, isSaleOffParameter, isShowOnHomePageParameter, priorityParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_ProductCategory_Delete(Nullable<int> productCategoryID, ObjectParameter errorCode)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductCategory_Delete", productCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductCategory_DownOrder(Nullable<int> productCategoryID, ObjectParameter errorCode)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductCategory_DownOrder", productCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductCategory_Insert(string productCategoryName, string productCategoryNameEn, string convertedProductCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var productCategoryNameParameter = productCategoryName != null ?
                new ObjectParameter("ProductCategoryName", productCategoryName) :
                new ObjectParameter("ProductCategoryName", typeof(string));
    
            var productCategoryNameEnParameter = productCategoryNameEn != null ?
                new ObjectParameter("ProductCategoryNameEn", productCategoryNameEn) :
                new ObjectParameter("ProductCategoryNameEn", typeof(string));
    
            var convertedProductCategoryNameParameter = convertedProductCategoryName != null ?
                new ObjectParameter("ConvertedProductCategoryName", convertedProductCategoryName) :
                new ObjectParameter("ConvertedProductCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductCategory_Insert", productCategoryNameParameter, productCategoryNameEnParameter, convertedProductCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, outImageName, errorCode);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_ProductCategory_IsChildrenExist(Nullable<int> productCategoryID, ObjectParameter errorCode)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_ProductCategory_IsChildrenExist", productCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductCategory_QuickUpdate(Nullable<int> productCategoryID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductCategory_QuickUpdate", productCategoryIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductCategory_SelectAll_Result> usp_ProductCategory_SelectAll(ObjectParameter errorCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductCategory_SelectAll_Result>("usp_ProductCategory_SelectAll", errorCode);
        }
    
        public virtual ObjectResult<usp_ProductCategory_SelectOne_Result> usp_ProductCategory_SelectOne(Nullable<int> productCategoryID, ObjectParameter errorCode)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductCategory_SelectOne_Result>("usp_ProductCategory_SelectOne", productCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductCategory_Update(Nullable<int> productCategoryID, string productCategoryName, string productCategoryNameEn, string convertedProductCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var productCategoryNameParameter = productCategoryName != null ?
                new ObjectParameter("ProductCategoryName", productCategoryName) :
                new ObjectParameter("ProductCategoryName", typeof(string));
    
            var productCategoryNameEnParameter = productCategoryNameEn != null ?
                new ObjectParameter("ProductCategoryNameEn", productCategoryNameEn) :
                new ObjectParameter("ProductCategoryNameEn", typeof(string));
    
            var convertedProductCategoryNameParameter = convertedProductCategoryName != null ?
                new ObjectParameter("ConvertedProductCategoryName", convertedProductCategoryName) :
                new ObjectParameter("ConvertedProductCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductCategory_Update", productCategoryIDParameter, productCategoryNameParameter, productCategoryNameEnParameter, convertedProductCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_ProductCategory_UpOrder(Nullable<int> productCategoryID, ObjectParameter errorCode)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductCategory_UpOrder", productCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductCategoryForEdit_SelectAll_Result> usp_ProductCategoryForEdit_SelectAll(Nullable<int> productCategoryID, ObjectParameter errorCode)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductCategoryForEdit_SelectAll_Result>("usp_ProductCategoryForEdit_SelectAll", productCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductCategoryHierarchyToTop_SelectAll_Result> usp_ProductCategoryHierarchyToTop_SelectAll(Nullable<int> currentProductCategoryID, ObjectParameter errorCode)
        {
            var currentProductCategoryIDParameter = currentProductCategoryID.HasValue ?
                new ObjectParameter("CurrentProductCategoryID", currentProductCategoryID) :
                new ObjectParameter("CurrentProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductCategoryHierarchyToTop_SelectAll_Result>("usp_ProductCategoryHierarchyToTop_SelectAll", currentProductCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductCategoryImage_Delete(Nullable<int> productCategoryID, ObjectParameter errorCode)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductCategoryImage_Delete", productCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductDownload_Delete(Nullable<int> productDownloadID, ObjectParameter errorCode)
        {
            var productDownloadIDParameter = productDownloadID.HasValue ?
                new ObjectParameter("ProductDownloadID", productDownloadID) :
                new ObjectParameter("ProductDownloadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductDownload_Delete", productDownloadIDParameter, errorCode);
        }
    
        public virtual int usp_ProductDownload_Insert(Nullable<int> productID, string fileName, string fileNameEn, string linkDownload, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileNameEnParameter = fileNameEn != null ?
                new ObjectParameter("FileNameEn", fileNameEn) :
                new ObjectParameter("FileNameEn", typeof(string));
    
            var linkDownloadParameter = linkDownload != null ?
                new ObjectParameter("LinkDownload", linkDownload) :
                new ObjectParameter("LinkDownload", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductDownload_Insert", productIDParameter, fileNameParameter, fileNameEnParameter, linkDownloadParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductDownload_QuickUpdate(Nullable<int> productDownloadID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productDownloadIDParameter = productDownloadID.HasValue ?
                new ObjectParameter("ProductDownloadID", productDownloadID) :
                new ObjectParameter("ProductDownloadID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductDownload_QuickUpdate", productDownloadIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductDownload_SelectAll(Nullable<int> productID, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductDownload_SelectAll", productIDParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductDownload_SelectOne_Result> usp_ProductDownload_SelectOne(Nullable<int> productDownloadID, ObjectParameter errorCode)
        {
            var productDownloadIDParameter = productDownloadID.HasValue ?
                new ObjectParameter("ProductDownloadID", productDownloadID) :
                new ObjectParameter("ProductDownloadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductDownload_SelectOne_Result>("usp_ProductDownload_SelectOne", productDownloadIDParameter, errorCode);
        }
    
        public virtual int usp_ProductDownload_Update(Nullable<int> productDownloadID, Nullable<int> productID, string fileName, string fileNameEn, string linkDownload, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productDownloadIDParameter = productDownloadID.HasValue ?
                new ObjectParameter("ProductDownloadID", productDownloadID) :
                new ObjectParameter("ProductDownloadID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileNameEnParameter = fileNameEn != null ?
                new ObjectParameter("FileNameEn", fileNameEn) :
                new ObjectParameter("FileNameEn", typeof(string));
    
            var linkDownloadParameter = linkDownload != null ?
                new ObjectParameter("LinkDownload", linkDownload) :
                new ObjectParameter("LinkDownload", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductDownload_Update", productDownloadIDParameter, productIDParameter, fileNameParameter, fileNameEnParameter, linkDownloadParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductImage_Delete(Nullable<int> productImageID, ObjectParameter errorCode)
        {
            var productImageIDParameter = productImageID.HasValue ?
                new ObjectParameter("ProductImageID", productImageID) :
                new ObjectParameter("ProductImageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductImage_Delete", productImageIDParameter, errorCode);
        }
    
        public virtual int usp_ProductImage_Insert(string imageName, string convertedProductName, string title, string descripttion, string titleEn, string descripttionEn, Nullable<int> productID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var convertedProductNameParameter = convertedProductName != null ?
                new ObjectParameter("ConvertedProductName", convertedProductName) :
                new ObjectParameter("ConvertedProductName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descripttionParameter = descripttion != null ?
                new ObjectParameter("Descripttion", descripttion) :
                new ObjectParameter("Descripttion", typeof(string));
    
            var titleEnParameter = titleEn != null ?
                new ObjectParameter("TitleEn", titleEn) :
                new ObjectParameter("TitleEn", typeof(string));
    
            var descripttionEnParameter = descripttionEn != null ?
                new ObjectParameter("DescripttionEn", descripttionEn) :
                new ObjectParameter("DescripttionEn", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductImage_Insert", imageNameParameter, convertedProductNameParameter, titleParameter, descripttionParameter, titleEnParameter, descripttionEnParameter, productIDParameter, isAvailableParameter, priorityParameter, outImageName, errorCode);
        }
    
        public virtual int usp_ProductImage_QuickUpdate(Nullable<int> productImageID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productImageIDParameter = productImageID.HasValue ?
                new ObjectParameter("ProductImageID", productImageID) :
                new ObjectParameter("ProductImageID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductImage_QuickUpdate", productImageIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductImage_SelectAll(Nullable<int> productID, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductImage_SelectAll", productIDParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductImage_SelectOne_Result> usp_ProductImage_SelectOne(Nullable<int> productImageID, ObjectParameter errorCode)
        {
            var productImageIDParameter = productImageID.HasValue ?
                new ObjectParameter("ProductImageID", productImageID) :
                new ObjectParameter("ProductImageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductImage_SelectOne_Result>("usp_ProductImage_SelectOne", productImageIDParameter, errorCode);
        }
    
        public virtual int usp_ProductImage_Update(Nullable<int> productImageID, string imageName, string convertedProductName, string title, string descripttion, string titleEn, string descripttionEn, Nullable<int> productID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productImageIDParameter = productImageID.HasValue ?
                new ObjectParameter("ProductImageID", productImageID) :
                new ObjectParameter("ProductImageID", typeof(int));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var convertedProductNameParameter = convertedProductName != null ?
                new ObjectParameter("ConvertedProductName", convertedProductName) :
                new ObjectParameter("ConvertedProductName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descripttionParameter = descripttion != null ?
                new ObjectParameter("Descripttion", descripttion) :
                new ObjectParameter("Descripttion", typeof(string));
    
            var titleEnParameter = titleEn != null ?
                new ObjectParameter("TitleEn", titleEn) :
                new ObjectParameter("TitleEn", typeof(string));
    
            var descripttionEnParameter = descripttionEn != null ?
                new ObjectParameter("DescripttionEn", descripttionEn) :
                new ObjectParameter("DescripttionEn", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductImage_Update", productImageIDParameter, imageNameParameter, convertedProductNameParameter, titleParameter, descripttionParameter, titleEnParameter, descripttionEnParameter, productIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductImages_Delete(Nullable<int> productID, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductImages_Delete", productIDParameter, errorCode);
        }
    
        public virtual int usp_ProductLength_Delete(Nullable<int> productLengthID, ObjectParameter errorCode)
        {
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductLength_Delete", productLengthIDParameter, errorCode);
        }
    
        public virtual int usp_ProductLength_Insert(Nullable<int> productID, string productLengthName, string productLengthNameEn, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productLengthNameParameter = productLengthName != null ?
                new ObjectParameter("ProductLengthName", productLengthName) :
                new ObjectParameter("ProductLengthName", typeof(string));
    
            var productLengthNameEnParameter = productLengthNameEn != null ?
                new ObjectParameter("ProductLengthNameEn", productLengthNameEn) :
                new ObjectParameter("ProductLengthNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductLength_Insert", productIDParameter, productLengthNameParameter, productLengthNameEnParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductLength_QuickUpdate(Nullable<int> productLengthID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductLength_QuickUpdate", productLengthIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductLength_SelectAll(Nullable<int> productID, string productLengthName, string productLengthNameEn, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productLengthNameParameter = productLengthName != null ?
                new ObjectParameter("ProductLengthName", productLengthName) :
                new ObjectParameter("ProductLengthName", typeof(string));
    
            var productLengthNameEnParameter = productLengthNameEn != null ?
                new ObjectParameter("ProductLengthNameEn", productLengthNameEn) :
                new ObjectParameter("ProductLengthNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductLength_SelectAll", productIDParameter, productLengthNameParameter, productLengthNameEnParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductLength_SelectOne_Result> usp_ProductLength_SelectOne(Nullable<int> productLengthID, ObjectParameter errorCode)
        {
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductLength_SelectOne_Result>("usp_ProductLength_SelectOne", productLengthIDParameter, errorCode);
        }
    
        public virtual int usp_ProductLength_Update(Nullable<int> productLengthID, Nullable<int> productID, string productLengthName, string productLengthNameEn, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productLengthNameParameter = productLengthName != null ?
                new ObjectParameter("ProductLengthName", productLengthName) :
                new ObjectParameter("ProductLengthName", typeof(string));
    
            var productLengthNameEnParameter = productLengthNameEn != null ?
                new ObjectParameter("ProductLengthNameEn", productLengthNameEn) :
                new ObjectParameter("ProductLengthNameEn", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductLength_Update", productLengthIDParameter, productIDParameter, productLengthNameParameter, productLengthNameEnParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductOfLength_Delete(Nullable<int> productOfLengthID, ObjectParameter errorCode)
        {
            var productOfLengthIDParameter = productOfLengthID.HasValue ?
                new ObjectParameter("ProductOfLengthID", productOfLengthID) :
                new ObjectParameter("ProductOfLengthID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOfLength_Delete", productOfLengthIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOfLength_Insert(Nullable<int> productID, Nullable<int> productLengthID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOfLength_Insert", productIDParameter, productLengthIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductOfLength_QuickUpdate(Nullable<int> productOfLengthID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productOfLengthIDParameter = productOfLengthID.HasValue ?
                new ObjectParameter("ProductOfLengthID", productOfLengthID) :
                new ObjectParameter("ProductOfLengthID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOfLength_QuickUpdate", productOfLengthIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductOfLength_SelectAll(Nullable<int> productLengthID, Nullable<int> productID, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOfLength_SelectAll", productLengthIDParameter, productIDParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual int usp_ProductOfLength_SelectOne(Nullable<int> productOfLengthID, ObjectParameter errorCode)
        {
            var productOfLengthIDParameter = productOfLengthID.HasValue ?
                new ObjectParameter("ProductOfLengthID", productOfLengthID) :
                new ObjectParameter("ProductOfLengthID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOfLength_SelectOne", productOfLengthIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOfLength_Update(Nullable<int> productOfLengthID, Nullable<int> productID, Nullable<int> productLengthID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productOfLengthIDParameter = productOfLengthID.HasValue ?
                new ObjectParameter("ProductOfLengthID", productOfLengthID) :
                new ObjectParameter("ProductOfLengthID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOfLength_Update", productOfLengthIDParameter, productIDParameter, productLengthIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductOfSame_Delete(Nullable<int> productOfSameID, ObjectParameter errorCode)
        {
            var productOfSameIDParameter = productOfSameID.HasValue ?
                new ObjectParameter("ProductOfSameID", productOfSameID) :
                new ObjectParameter("ProductOfSameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOfSame_Delete", productOfSameIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOfSame_Insert(Nullable<int> productID, Nullable<bool> isAvailable, Nullable<int> priority, Nullable<int> productParentID, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var productParentIDParameter = productParentID.HasValue ?
                new ObjectParameter("ProductParentID", productParentID) :
                new ObjectParameter("ProductParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOfSame_Insert", productIDParameter, isAvailableParameter, priorityParameter, productParentIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOfSame_QuickUpdate(Nullable<int> productOfSameID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productOfSameIDParameter = productOfSameID.HasValue ?
                new ObjectParameter("ProductOfSameID", productOfSameID) :
                new ObjectParameter("ProductOfSameID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOfSame_QuickUpdate", productOfSameIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductOfSame_SelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, string keyword, Nullable<int> productOfSameID, Nullable<int> productID, Nullable<bool> isAvailable, Nullable<int> priority, Nullable<int> productParentID, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var productOfSameIDParameter = productOfSameID.HasValue ?
                new ObjectParameter("ProductOfSameID", productOfSameID) :
                new ObjectParameter("ProductOfSameID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var productParentIDParameter = productParentID.HasValue ?
                new ObjectParameter("ProductParentID", productParentID) :
                new ObjectParameter("ProductParentID", typeof(int));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOfSame_SelectAll", startRowIndexParameter, endRowIndexParameter, keywordParameter, productOfSameIDParameter, productIDParameter, isAvailableParameter, priorityParameter, productParentIDParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductOfSame_SelectOne_Result> usp_ProductOfSame_SelectOne(Nullable<int> productOfSameID, ObjectParameter errorCode)
        {
            var productOfSameIDParameter = productOfSameID.HasValue ?
                new ObjectParameter("ProductOfSameID", productOfSameID) :
                new ObjectParameter("ProductOfSameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductOfSame_SelectOne_Result>("usp_ProductOfSame_SelectOne", productOfSameIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductOfSame_SelectSame_Result> usp_ProductOfSame_SelectSame(Nullable<int> productOfSameID, ObjectParameter errorCode)
        {
            var productOfSameIDParameter = productOfSameID.HasValue ?
                new ObjectParameter("ProductOfSameID", productOfSameID) :
                new ObjectParameter("ProductOfSameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductOfSame_SelectSame_Result>("usp_ProductOfSame_SelectSame", productOfSameIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOfSame_Update(Nullable<int> productOfSameID, Nullable<int> productID, Nullable<bool> isAvailable, Nullable<int> priority, Nullable<int> productParentID, ObjectParameter errorCode)
        {
            var productOfSameIDParameter = productOfSameID.HasValue ?
                new ObjectParameter("ProductOfSameID", productOfSameID) :
                new ObjectParameter("ProductOfSameID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var productParentIDParameter = productParentID.HasValue ?
                new ObjectParameter("ProductParentID", productParentID) :
                new ObjectParameter("ProductParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOfSame_Update", productOfSameIDParameter, productIDParameter, isAvailableParameter, priorityParameter, productParentIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOption_Delete(Nullable<int> productOptionID, ObjectParameter errorCode)
        {
            var productOptionIDParameter = productOptionID.HasValue ?
                new ObjectParameter("ProductOptionID", productOptionID) :
                new ObjectParameter("ProductOptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOption_Delete", productOptionIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOption_Insert(string imageName, string metaTittle, string metaDescription, string productOptionTitle, string convertedProductOptionTitle, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string productOptionTitleEn, string descriptionEn, string contentEn, string tagEn, Nullable<int> productOptionCategoryID, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var productOptionTitleParameter = productOptionTitle != null ?
                new ObjectParameter("ProductOptionTitle", productOptionTitle) :
                new ObjectParameter("ProductOptionTitle", typeof(string));
    
            var convertedProductOptionTitleParameter = convertedProductOptionTitle != null ?
                new ObjectParameter("ConvertedProductOptionTitle", convertedProductOptionTitle) :
                new ObjectParameter("ConvertedProductOptionTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var productOptionTitleEnParameter = productOptionTitleEn != null ?
                new ObjectParameter("ProductOptionTitleEn", productOptionTitleEn) :
                new ObjectParameter("ProductOptionTitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOption_Insert", imageNameParameter, metaTittleParameter, metaDescriptionParameter, productOptionTitleParameter, convertedProductOptionTitleParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, productOptionTitleEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, productOptionCategoryIDParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, isAvailableParameter, priorityParameter, outImageName, errorCode);
        }
    
        public virtual int usp_ProductOption_QuickUpdate(Nullable<int> productOptionID, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productOptionIDParameter = productOptionID.HasValue ?
                new ObjectParameter("ProductOptionID", productOptionID) :
                new ObjectParameter("ProductOptionID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOption_QuickUpdate", productOptionIDParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductOption_SelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, string keyword, string productOptionTitle, string description, Nullable<int> productOptionCategoryID, string tag, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var productOptionTitleParameter = productOptionTitle != null ?
                new ObjectParameter("ProductOptionTitle", productOptionTitle) :
                new ObjectParameter("ProductOptionTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOption_SelectAll", startRowIndexParameter, endRowIndexParameter, keywordParameter, productOptionTitleParameter, descriptionParameter, productOptionCategoryIDParameter, tagParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, fromDateParameter, toDateParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductOption_SelectOne_Result> usp_ProductOption_SelectOne(Nullable<int> productOptionID, ObjectParameter errorCode)
        {
            var productOptionIDParameter = productOptionID.HasValue ?
                new ObjectParameter("ProductOptionID", productOptionID) :
                new ObjectParameter("ProductOptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductOption_SelectOne_Result>("usp_ProductOption_SelectOne", productOptionIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOption_Update(Nullable<int> productOptionID, string metaTittle, string metaDescription, string productOptionTitle, string convertedProductOptionTitle, string imageName, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string productOptionTitleEn, string descriptionEn, string contentEn, string tagEn, Nullable<int> productOptionCategoryID, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productOptionIDParameter = productOptionID.HasValue ?
                new ObjectParameter("ProductOptionID", productOptionID) :
                new ObjectParameter("ProductOptionID", typeof(int));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var productOptionTitleParameter = productOptionTitle != null ?
                new ObjectParameter("ProductOptionTitle", productOptionTitle) :
                new ObjectParameter("ProductOptionTitle", typeof(string));
    
            var convertedProductOptionTitleParameter = convertedProductOptionTitle != null ?
                new ObjectParameter("ConvertedProductOptionTitle", convertedProductOptionTitle) :
                new ObjectParameter("ConvertedProductOptionTitle", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var productOptionTitleEnParameter = productOptionTitleEn != null ?
                new ObjectParameter("ProductOptionTitleEn", productOptionTitleEn) :
                new ObjectParameter("ProductOptionTitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOption_Update", productOptionIDParameter, metaTittleParameter, metaDescriptionParameter, productOptionTitleParameter, convertedProductOptionTitleParameter, imageNameParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, productOptionTitleEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, productOptionCategoryIDParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductOptionCategory_Delete(Nullable<int> productOptionCategoryID, ObjectParameter errorCode)
        {
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOptionCategory_Delete", productOptionCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOptionCategory_DownOrder(Nullable<int> productOptionCategoryID, ObjectParameter errorCode)
        {
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOptionCategory_DownOrder", productOptionCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOptionCategory_Insert(string productOptionCategoryName, string productOptionCategoryNameEn, string convertedProductOptionCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> productID, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var productOptionCategoryNameParameter = productOptionCategoryName != null ?
                new ObjectParameter("ProductOptionCategoryName", productOptionCategoryName) :
                new ObjectParameter("ProductOptionCategoryName", typeof(string));
    
            var productOptionCategoryNameEnParameter = productOptionCategoryNameEn != null ?
                new ObjectParameter("ProductOptionCategoryNameEn", productOptionCategoryNameEn) :
                new ObjectParameter("ProductOptionCategoryNameEn", typeof(string));
    
            var convertedProductOptionCategoryNameParameter = convertedProductOptionCategoryName != null ?
                new ObjectParameter("ConvertedProductOptionCategoryName", convertedProductOptionCategoryName) :
                new ObjectParameter("ConvertedProductOptionCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOptionCategory_Insert", productOptionCategoryNameParameter, productOptionCategoryNameEnParameter, convertedProductOptionCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, productIDParameter, outImageName, errorCode);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_ProductOptionCategory_IsChildrenExist(Nullable<int> productOptionCategoryID, ObjectParameter errorCode)
        {
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_ProductOptionCategory_IsChildrenExist", productOptionCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOptionCategory_QuickUpdate(Nullable<int> productOptionCategoryID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOptionCategory_QuickUpdate", productOptionCategoryIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductOptionCategory_SelectAll_Result> usp_ProductOptionCategory_SelectAll(ObjectParameter errorCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductOptionCategory_SelectAll_Result>("usp_ProductOptionCategory_SelectAll", errorCode);
        }
    
        public virtual int usp_ProductOptionCategory_SelectAll1(Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> productID, ObjectParameter errorCode)
        {
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOptionCategory_SelectAll1", isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, productIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductOptionCategory_SelectOne_Result> usp_ProductOptionCategory_SelectOne(Nullable<int> productOptionCategoryID, ObjectParameter errorCode)
        {
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductOptionCategory_SelectOne_Result>("usp_ProductOptionCategory_SelectOne", productOptionCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOptionCategory_Update(Nullable<int> productOptionCategoryID, string productOptionCategoryName, string productOptionCategoryNameEn, string convertedProductOptionCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> productID, ObjectParameter errorCode)
        {
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            var productOptionCategoryNameParameter = productOptionCategoryName != null ?
                new ObjectParameter("ProductOptionCategoryName", productOptionCategoryName) :
                new ObjectParameter("ProductOptionCategoryName", typeof(string));
    
            var productOptionCategoryNameEnParameter = productOptionCategoryNameEn != null ?
                new ObjectParameter("ProductOptionCategoryNameEn", productOptionCategoryNameEn) :
                new ObjectParameter("ProductOptionCategoryNameEn", typeof(string));
    
            var convertedProductOptionCategoryNameParameter = convertedProductOptionCategoryName != null ?
                new ObjectParameter("ConvertedProductOptionCategoryName", convertedProductOptionCategoryName) :
                new ObjectParameter("ConvertedProductOptionCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOptionCategory_Update", productOptionCategoryIDParameter, productOptionCategoryNameParameter, productOptionCategoryNameEnParameter, convertedProductOptionCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, productIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOptionCategory_UpOrder(Nullable<int> productOptionCategoryID, ObjectParameter errorCode)
        {
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOptionCategory_UpOrder", productOptionCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductOptionCategoryForEdit_SelectAll_Result> usp_ProductOptionCategoryForEdit_SelectAll(Nullable<int> productOptionCategoryID, ObjectParameter errorCode)
        {
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductOptionCategoryForEdit_SelectAll_Result>("usp_ProductOptionCategoryForEdit_SelectAll", productOptionCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductOptionCategoryHierarchyToTop_SelectAll_Result> usp_ProductOptionCategoryHierarchyToTop_SelectAll(Nullable<int> currentProductOptionCategoryID, ObjectParameter errorCode)
        {
            var currentProductOptionCategoryIDParameter = currentProductOptionCategoryID.HasValue ?
                new ObjectParameter("CurrentProductOptionCategoryID", currentProductOptionCategoryID) :
                new ObjectParameter("CurrentProductOptionCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductOptionCategoryHierarchyToTop_SelectAll_Result>("usp_ProductOptionCategoryHierarchyToTop_SelectAll", currentProductOptionCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductOptionCategoryImage_Delete(Nullable<int> productOptionCategoryID, ObjectParameter errorCode)
        {
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductOptionCategoryImage_Delete", productOptionCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProductSizeColor_Delete(Nullable<int> productSizeColorID, Nullable<int> productLengthID, Nullable<int> productOptionCategoryID, Nullable<int> productID, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var productSizeColorIDParameter = productSizeColorID.HasValue ?
                new ObjectParameter("ProductSizeColorID", productSizeColorID) :
                new ObjectParameter("ProductSizeColorID", typeof(int));
    
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductSizeColor_Delete", productSizeColorIDParameter, productLengthIDParameter, productOptionCategoryIDParameter, productIDParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_ProductSizeColor_Delete1(Nullable<int> productSizeColorID, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var productSizeColorIDParameter = productSizeColorID.HasValue ?
                new ObjectParameter("ProductSizeColorID", productSizeColorID) :
                new ObjectParameter("ProductSizeColorID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductSizeColor_Delete1", productSizeColorIDParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_ProductSizeColor_Insert(Nullable<int> productLengthID, Nullable<int> productOptionCategoryID, Nullable<bool> inStock, Nullable<int> productID, Nullable<System.DateTime> createDate, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            var inStockParameter = inStock.HasValue ?
                new ObjectParameter("InStock", inStock) :
                new ObjectParameter("InStock", typeof(bool));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductSizeColor_Insert", productLengthIDParameter, productOptionCategoryIDParameter, inStockParameter, productIDParameter, createDateParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProductSizeColor_QuickUpdate(Nullable<int> productSizeColorID, Nullable<bool> isAvailable, Nullable<int> priority, Nullable<bool> inStock, Nullable<int> quantity, ObjectParameter errorCode)
        {
            var productSizeColorIDParameter = productSizeColorID.HasValue ?
                new ObjectParameter("ProductSizeColorID", productSizeColorID) :
                new ObjectParameter("ProductSizeColorID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var inStockParameter = inStock.HasValue ?
                new ObjectParameter("InStock", inStock) :
                new ObjectParameter("InStock", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductSizeColor_QuickUpdate", productSizeColorIDParameter, isAvailableParameter, priorityParameter, inStockParameter, quantityParameter, errorCode);
        }
    
        public virtual int usp_ProductSizeColor_SelectAll(Nullable<int> productLengthID, Nullable<int> productOptionCategoryID, Nullable<int> productID, Nullable<bool> inStock, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var inStockParameter = inStock.HasValue ?
                new ObjectParameter("InStock", inStock) :
                new ObjectParameter("InStock", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductSizeColor_SelectAll", productLengthIDParameter, productOptionCategoryIDParameter, productIDParameter, inStockParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProductSizeColor_SelectOne_Result> usp_ProductSizeColor_SelectOne(Nullable<int> productSizeColorID, ObjectParameter errorCode)
        {
            var productSizeColorIDParameter = productSizeColorID.HasValue ?
                new ObjectParameter("ProductSizeColorID", productSizeColorID) :
                new ObjectParameter("ProductSizeColorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductSizeColor_SelectOne_Result>("usp_ProductSizeColor_SelectOne", productSizeColorIDParameter, errorCode);
        }
    
        public virtual int usp_ProductSizeColor_Update(Nullable<int> productSizeColorID, Nullable<int> productLengthID, Nullable<int> productOptionCategoryID, Nullable<int> productID, Nullable<bool> inStock, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var productSizeColorIDParameter = productSizeColorID.HasValue ?
                new ObjectParameter("ProductSizeColorID", productSizeColorID) :
                new ObjectParameter("ProductSizeColorID", typeof(int));
    
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var inStockParameter = inStock.HasValue ?
                new ObjectParameter("InStock", inStock) :
                new ObjectParameter("InStock", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductSizeColor_Update", productSizeColorIDParameter, productLengthIDParameter, productOptionCategoryIDParameter, productIDParameter, inStockParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Project_Delete(Nullable<int> projectID, ObjectParameter errorCode)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Project_Delete", projectIDParameter, errorCode);
        }
    
        public virtual int usp_Project_Insert(string imageName, string metaTittle, string metaDescription, string projectTitle, string convertedProjectTitle, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string projectTitleEn, string descriptionEn, string contentEn, string tagEn, Nullable<int> projectCategoryID, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var projectTitleParameter = projectTitle != null ?
                new ObjectParameter("ProjectTitle", projectTitle) :
                new ObjectParameter("ProjectTitle", typeof(string));
    
            var convertedProjectTitleParameter = convertedProjectTitle != null ?
                new ObjectParameter("ConvertedProjectTitle", convertedProjectTitle) :
                new ObjectParameter("ConvertedProjectTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var projectTitleEnParameter = projectTitleEn != null ?
                new ObjectParameter("ProjectTitleEn", projectTitleEn) :
                new ObjectParameter("ProjectTitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Project_Insert", imageNameParameter, metaTittleParameter, metaDescriptionParameter, projectTitleParameter, convertedProjectTitleParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, projectTitleEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, projectCategoryIDParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, outImageName, errorCode);
        }
    
        public virtual int usp_Project_QuickUpdate(Nullable<int> projectID, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Project_QuickUpdate", projectIDParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Project_SelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, string keyword, string projectTitle, string description, Nullable<int> projectCategoryID, string tag, Nullable<bool> isShowOnHomePage, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var projectTitleParameter = projectTitle != null ?
                new ObjectParameter("ProjectTitle", projectTitle) :
                new ObjectParameter("ProjectTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Project_SelectAll", startRowIndexParameter, endRowIndexParameter, keywordParameter, projectTitleParameter, descriptionParameter, projectCategoryIDParameter, tagParameter, isShowOnHomePageParameter, fromDateParameter, toDateParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Project_SelectOne_Result> usp_Project_SelectOne(Nullable<int> projectID, ObjectParameter errorCode)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Project_SelectOne_Result>("usp_Project_SelectOne", projectIDParameter, errorCode);
        }
    
        public virtual int usp_Project_Update(Nullable<int> projectID, string metaTittle, string metaDescription, string projectTitle, string convertedProjectTitle, string imageName, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string projectTitleEn, string descriptionEn, string contentEn, string tagEn, Nullable<int> projectCategoryID, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var projectTitleParameter = projectTitle != null ?
                new ObjectParameter("ProjectTitle", projectTitle) :
                new ObjectParameter("ProjectTitle", typeof(string));
    
            var convertedProjectTitleParameter = convertedProjectTitle != null ?
                new ObjectParameter("ConvertedProjectTitle", convertedProjectTitle) :
                new ObjectParameter("ConvertedProjectTitle", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var projectTitleEnParameter = projectTitleEn != null ?
                new ObjectParameter("ProjectTitleEn", projectTitleEn) :
                new ObjectParameter("ProjectTitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Project_Update", projectIDParameter, metaTittleParameter, metaDescriptionParameter, projectTitleParameter, convertedProjectTitleParameter, imageNameParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, projectTitleEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, projectCategoryIDParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProjectCategory_Delete(Nullable<int> projectCategoryID, ObjectParameter errorCode)
        {
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectCategory_Delete", projectCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectCategory_DownOrder(Nullable<int> projectCategoryID, ObjectParameter errorCode)
        {
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectCategory_DownOrder", projectCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectCategory_Insert(string projectCategoryName, string projectCategoryNameEn, string convertedProjectCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var projectCategoryNameParameter = projectCategoryName != null ?
                new ObjectParameter("ProjectCategoryName", projectCategoryName) :
                new ObjectParameter("ProjectCategoryName", typeof(string));
    
            var projectCategoryNameEnParameter = projectCategoryNameEn != null ?
                new ObjectParameter("ProjectCategoryNameEn", projectCategoryNameEn) :
                new ObjectParameter("ProjectCategoryNameEn", typeof(string));
    
            var convertedProjectCategoryNameParameter = convertedProjectCategoryName != null ?
                new ObjectParameter("ConvertedProjectCategoryName", convertedProjectCategoryName) :
                new ObjectParameter("ConvertedProjectCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectCategory_Insert", projectCategoryNameParameter, projectCategoryNameEnParameter, convertedProjectCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, outImageName, errorCode);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_ProjectCategory_IsChildrenExist(Nullable<int> projectCategoryID, ObjectParameter errorCode)
        {
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_ProjectCategory_IsChildrenExist", projectCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectCategory_QuickUpdate(Nullable<int> projectCategoryID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectCategory_QuickUpdate", projectCategoryIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProjectCategory_SelectAll_Result> usp_ProjectCategory_SelectAll(ObjectParameter errorCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProjectCategory_SelectAll_Result>("usp_ProjectCategory_SelectAll", errorCode);
        }
    
        public virtual ObjectResult<usp_ProjectCategory_SelectOne_Result> usp_ProjectCategory_SelectOne(Nullable<int> projectCategoryID, ObjectParameter errorCode)
        {
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProjectCategory_SelectOne_Result>("usp_ProjectCategory_SelectOne", projectCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectCategory_Update(Nullable<int> projectCategoryID, string projectCategoryName, string projectCategoryNameEn, string convertedProjectCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            var projectCategoryNameParameter = projectCategoryName != null ?
                new ObjectParameter("ProjectCategoryName", projectCategoryName) :
                new ObjectParameter("ProjectCategoryName", typeof(string));
    
            var projectCategoryNameEnParameter = projectCategoryNameEn != null ?
                new ObjectParameter("ProjectCategoryNameEn", projectCategoryNameEn) :
                new ObjectParameter("ProjectCategoryNameEn", typeof(string));
    
            var convertedProjectCategoryNameParameter = convertedProjectCategoryName != null ?
                new ObjectParameter("ConvertedProjectCategoryName", convertedProjectCategoryName) :
                new ObjectParameter("ConvertedProjectCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectCategory_Update", projectCategoryIDParameter, projectCategoryNameParameter, projectCategoryNameEnParameter, convertedProjectCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_ProjectCategory_UpOrder(Nullable<int> projectCategoryID, ObjectParameter errorCode)
        {
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectCategory_UpOrder", projectCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProjectCategoryForEdit_SelectAll_Result> usp_ProjectCategoryForEdit_SelectAll(Nullable<int> projectCategoryID, ObjectParameter errorCode)
        {
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProjectCategoryForEdit_SelectAll_Result>("usp_ProjectCategoryForEdit_SelectAll", projectCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProjectCategoryHierarchyToTop_SelectAll_Result> usp_ProjectCategoryHierarchyToTop_SelectAll(Nullable<int> currentProjectCategoryID, ObjectParameter errorCode)
        {
            var currentProjectCategoryIDParameter = currentProjectCategoryID.HasValue ?
                new ObjectParameter("CurrentProjectCategoryID", currentProjectCategoryID) :
                new ObjectParameter("CurrentProjectCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProjectCategoryHierarchyToTop_SelectAll_Result>("usp_ProjectCategoryHierarchyToTop_SelectAll", currentProjectCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectCategoryImage_Delete(Nullable<int> projectCategoryID, ObjectParameter errorCode)
        {
            var projectCategoryIDParameter = projectCategoryID.HasValue ?
                new ObjectParameter("ProjectCategoryID", projectCategoryID) :
                new ObjectParameter("ProjectCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectCategoryImage_Delete", projectCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectDownload_Delete(Nullable<int> projectDownloadID, ObjectParameter errorCode)
        {
            var projectDownloadIDParameter = projectDownloadID.HasValue ?
                new ObjectParameter("ProjectDownloadID", projectDownloadID) :
                new ObjectParameter("ProjectDownloadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectDownload_Delete", projectDownloadIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectDownload_Insert(Nullable<int> projectID, string fileName, string fileNameEn, string linkDownload, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileNameEnParameter = fileNameEn != null ?
                new ObjectParameter("FileNameEn", fileNameEn) :
                new ObjectParameter("FileNameEn", typeof(string));
    
            var linkDownloadParameter = linkDownload != null ?
                new ObjectParameter("LinkDownload", linkDownload) :
                new ObjectParameter("LinkDownload", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectDownload_Insert", projectIDParameter, fileNameParameter, fileNameEnParameter, linkDownloadParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProjectDownload_QuickUpdate(Nullable<int> projectDownloadID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var projectDownloadIDParameter = projectDownloadID.HasValue ?
                new ObjectParameter("ProjectDownloadID", projectDownloadID) :
                new ObjectParameter("ProjectDownloadID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectDownload_QuickUpdate", projectDownloadIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProjectDownload_SelectAll(Nullable<int> projectID, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectDownload_SelectAll", projectIDParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProjectDownload_SelectOne_Result> usp_ProjectDownload_SelectOne(Nullable<int> projectDownloadID, ObjectParameter errorCode)
        {
            var projectDownloadIDParameter = projectDownloadID.HasValue ?
                new ObjectParameter("ProjectDownloadID", projectDownloadID) :
                new ObjectParameter("ProjectDownloadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProjectDownload_SelectOne_Result>("usp_ProjectDownload_SelectOne", projectDownloadIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectDownload_Update(Nullable<int> projectDownloadID, Nullable<int> projectID, string fileName, string fileNameEn, string linkDownload, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var projectDownloadIDParameter = projectDownloadID.HasValue ?
                new ObjectParameter("ProjectDownloadID", projectDownloadID) :
                new ObjectParameter("ProjectDownloadID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileNameEnParameter = fileNameEn != null ?
                new ObjectParameter("FileNameEn", fileNameEn) :
                new ObjectParameter("FileNameEn", typeof(string));
    
            var linkDownloadParameter = linkDownload != null ?
                new ObjectParameter("LinkDownload", linkDownload) :
                new ObjectParameter("LinkDownload", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectDownload_Update", projectDownloadIDParameter, projectIDParameter, fileNameParameter, fileNameEnParameter, linkDownloadParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProjectImage_Delete(Nullable<int> projectImageID, ObjectParameter errorCode)
        {
            var projectImageIDParameter = projectImageID.HasValue ?
                new ObjectParameter("ProjectImageID", projectImageID) :
                new ObjectParameter("ProjectImageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectImage_Delete", projectImageIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectImage_Insert(string imageName, string convertedProjectName, string title, string descripttion, string titleEn, string descripttionEn, Nullable<int> projectID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var convertedProjectNameParameter = convertedProjectName != null ?
                new ObjectParameter("ConvertedProjectName", convertedProjectName) :
                new ObjectParameter("ConvertedProjectName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descripttionParameter = descripttion != null ?
                new ObjectParameter("Descripttion", descripttion) :
                new ObjectParameter("Descripttion", typeof(string));
    
            var titleEnParameter = titleEn != null ?
                new ObjectParameter("TitleEn", titleEn) :
                new ObjectParameter("TitleEn", typeof(string));
    
            var descripttionEnParameter = descripttionEn != null ?
                new ObjectParameter("DescripttionEn", descripttionEn) :
                new ObjectParameter("DescripttionEn", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectImage_Insert", imageNameParameter, convertedProjectNameParameter, titleParameter, descripttionParameter, titleEnParameter, descripttionEnParameter, projectIDParameter, isAvailableParameter, priorityParameter, outImageName, errorCode);
        }
    
        public virtual int usp_ProjectImage_QuickUpdate(Nullable<int> projectImageID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var projectImageIDParameter = projectImageID.HasValue ?
                new ObjectParameter("ProjectImageID", projectImageID) :
                new ObjectParameter("ProjectImageID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectImage_QuickUpdate", projectImageIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProjectImage_SelectAll(Nullable<int> projectID, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectImage_SelectAll", projectIDParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ProjectImage_SelectOne_Result> usp_ProjectImage_SelectOne(Nullable<int> projectImageID, ObjectParameter errorCode)
        {
            var projectImageIDParameter = projectImageID.HasValue ?
                new ObjectParameter("ProjectImageID", projectImageID) :
                new ObjectParameter("ProjectImageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProjectImage_SelectOne_Result>("usp_ProjectImage_SelectOne", projectImageIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectImage_Update(Nullable<int> projectImageID, string imageName, string convertedProjectName, string title, string descripttion, string titleEn, string descripttionEn, Nullable<int> projectID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var projectImageIDParameter = projectImageID.HasValue ?
                new ObjectParameter("ProjectImageID", projectImageID) :
                new ObjectParameter("ProjectImageID", typeof(int));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var convertedProjectNameParameter = convertedProjectName != null ?
                new ObjectParameter("ConvertedProjectName", convertedProjectName) :
                new ObjectParameter("ConvertedProjectName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descripttionParameter = descripttion != null ?
                new ObjectParameter("Descripttion", descripttion) :
                new ObjectParameter("Descripttion", typeof(string));
    
            var titleEnParameter = titleEn != null ?
                new ObjectParameter("TitleEn", titleEn) :
                new ObjectParameter("TitleEn", typeof(string));
    
            var descripttionEnParameter = descripttionEn != null ?
                new ObjectParameter("DescripttionEn", descripttionEn) :
                new ObjectParameter("DescripttionEn", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectImage_Update", projectImageIDParameter, imageNameParameter, convertedProjectNameParameter, titleParameter, descripttionParameter, titleEnParameter, descripttionEnParameter, projectIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProjectImages_Delete(Nullable<int> projectID, ObjectParameter errorCode)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectImages_Delete", projectIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectVideo_Delete(Nullable<int> projectVideoID, ObjectParameter errorCode)
        {
            var projectVideoIDParameter = projectVideoID.HasValue ?
                new ObjectParameter("ProjectVideoID", projectVideoID) :
                new ObjectParameter("ProjectVideoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectVideo_Delete", projectVideoIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectVideo_Insert(string title, string description, string titleEn, string descriptionEn, string convertedTitle, string imagePath, string projectVideoPath, Nullable<int> projectID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outProjectVideoID, ObjectParameter errorCode)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var titleEnParameter = titleEn != null ?
                new ObjectParameter("TitleEn", titleEn) :
                new ObjectParameter("TitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var convertedTitleParameter = convertedTitle != null ?
                new ObjectParameter("ConvertedTitle", convertedTitle) :
                new ObjectParameter("ConvertedTitle", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var projectVideoPathParameter = projectVideoPath != null ?
                new ObjectParameter("ProjectVideoPath", projectVideoPath) :
                new ObjectParameter("ProjectVideoPath", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectVideo_Insert", titleParameter, descriptionParameter, titleEnParameter, descriptionEnParameter, convertedTitleParameter, imagePathParameter, projectVideoPathParameter, projectIDParameter, isAvailableParameter, priorityParameter, outProjectVideoID, errorCode);
        }
    
        public virtual int usp_ProjectVideo_QuickUpdate(Nullable<int> projectVideoID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var projectVideoIDParameter = projectVideoID.HasValue ?
                new ObjectParameter("ProjectVideoID", projectVideoID) :
                new ObjectParameter("ProjectVideoID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectVideo_QuickUpdate", projectVideoIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ProjectVideo_SelectAll(string keyword, string title, string description, Nullable<int> projectID, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectVideo_SelectAll", keywordParameter, titleParameter, descriptionParameter, projectIDParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual int usp_ProjectVideo_SelectMaxID(ObjectParameter projectVideoID, ObjectParameter errorCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectVideo_SelectMaxID", projectVideoID, errorCode);
        }
    
        public virtual ObjectResult<usp_ProjectVideo_SelectOne_Result> usp_ProjectVideo_SelectOne(Nullable<int> projectVideoID, ObjectParameter errorCode)
        {
            var projectVideoIDParameter = projectVideoID.HasValue ?
                new ObjectParameter("ProjectVideoID", projectVideoID) :
                new ObjectParameter("ProjectVideoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProjectVideo_SelectOne_Result>("usp_ProjectVideo_SelectOne", projectVideoIDParameter, errorCode);
        }
    
        public virtual int usp_ProjectVideo_Update(Nullable<int> projectVideoID, string title, string description, string titleEn, string descriptionEn, string convertedTitle, string imagePath, string projectVideoPath, Nullable<int> projectID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var projectVideoIDParameter = projectVideoID.HasValue ?
                new ObjectParameter("ProjectVideoID", projectVideoID) :
                new ObjectParameter("ProjectVideoID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var titleEnParameter = titleEn != null ?
                new ObjectParameter("TitleEn", titleEn) :
                new ObjectParameter("TitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var convertedTitleParameter = convertedTitle != null ?
                new ObjectParameter("ConvertedTitle", convertedTitle) :
                new ObjectParameter("ConvertedTitle", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var projectVideoPathParameter = projectVideoPath != null ?
                new ObjectParameter("ProjectVideoPath", projectVideoPath) :
                new ObjectParameter("ProjectVideoPath", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectVideo_Update", projectVideoIDParameter, titleParameter, descriptionParameter, titleEnParameter, descriptionEnParameter, convertedTitleParameter, imagePathParameter, projectVideoPathParameter, projectIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Province_Delete(Nullable<int> provinceID, ObjectParameter errorCode)
        {
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Province_Delete", provinceIDParameter, errorCode);
        }
    
        public virtual int usp_Province_Insert(string provinceName, string shortName, Nullable<int> countryID, Nullable<int> priority, Nullable<bool> isAvailable, Nullable<decimal> shippingPrice, ObjectParameter errorCode)
        {
            var provinceNameParameter = provinceName != null ?
                new ObjectParameter("ProvinceName", provinceName) :
                new ObjectParameter("ProvinceName", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var shippingPriceParameter = shippingPrice.HasValue ?
                new ObjectParameter("ShippingPrice", shippingPrice) :
                new ObjectParameter("ShippingPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Province_Insert", provinceNameParameter, shortNameParameter, countryIDParameter, priorityParameter, isAvailableParameter, shippingPriceParameter, errorCode);
        }
    
        public virtual int usp_Province_QuickUpdate(Nullable<int> provinceID, Nullable<int> priority, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Province_QuickUpdate", provinceIDParameter, priorityParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_Province_SelectAll(Nullable<int> provinceID, string provinceName, string shortName, Nullable<int> countryID, Nullable<int> priority, Nullable<bool> isAvailable, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var provinceNameParameter = provinceName != null ?
                new ObjectParameter("ProvinceName", provinceName) :
                new ObjectParameter("ProvinceName", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Province_SelectAll", provinceIDParameter, provinceNameParameter, shortNameParameter, countryIDParameter, priorityParameter, isAvailableParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Province_SelectOne_Result> usp_Province_SelectOne(Nullable<int> provinceID, ObjectParameter errorCode)
        {
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Province_SelectOne_Result>("usp_Province_SelectOne", provinceIDParameter, errorCode);
        }
    
        public virtual int usp_Province_Update(Nullable<int> provinceID, string provinceName, string shortName, Nullable<int> countryID, Nullable<int> priority, Nullable<bool> isAvailable, Nullable<decimal> shippingPrice, ObjectParameter errorCode)
        {
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var provinceNameParameter = provinceName != null ?
                new ObjectParameter("ProvinceName", provinceName) :
                new ObjectParameter("ProvinceName", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var shippingPriceParameter = shippingPrice.HasValue ?
                new ObjectParameter("ShippingPrice", shippingPrice) :
                new ObjectParameter("ShippingPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Province_Update", provinceIDParameter, provinceNameParameter, shortNameParameter, countryIDParameter, priorityParameter, isAvailableParameter, shippingPriceParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Rating_SelectAll_Result> usp_Rating_SelectAll(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Rating_SelectAll_Result>("usp_Rating_SelectAll", productIDParameter);
        }
    
        public virtual int usp_Rating_Update(Nullable<int> productID, Nullable<int> rateID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Rating_Update", productIDParameter, rateIDParameter);
        }
    
        public virtual int usp_SameArticle_SelectAll(Nullable<int> rerultCount, Nullable<int> articleID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SameArticle_SelectAll", rerultCountParameter, articleIDParameter, errorCode);
        }
    
        public virtual int usp_SameCareer_SelectAll(Nullable<int> rerultCount, Nullable<int> careerID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var careerIDParameter = careerID.HasValue ?
                new ObjectParameter("CareerID", careerID) :
                new ObjectParameter("CareerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SameCareer_SelectAll", rerultCountParameter, careerIDParameter, errorCode);
        }
    
        public virtual int usp_SameProduct_SelectAll(Nullable<int> rerultCount, Nullable<int> productID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SameProduct_SelectAll", rerultCountParameter, productIDParameter, errorCode);
        }
    
        public virtual int usp_SameProject_SelectAll(Nullable<int> rerultCount, Nullable<int> projectID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SameProject_SelectAll", rerultCountParameter, projectIDParameter, errorCode);
        }
    
        public virtual int usp_SameService_SelectAll(Nullable<int> rerultCount, Nullable<int> serviceID, ObjectParameter errorCode)
        {
            var rerultCountParameter = rerultCount.HasValue ?
                new ObjectParameter("RerultCount", rerultCount) :
                new ObjectParameter("RerultCount", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SameService_SelectAll", rerultCountParameter, serviceIDParameter, errorCode);
        }
    
        public virtual int usp_Service_Delete(Nullable<int> serviceID, ObjectParameter errorCode)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Service_Delete", serviceIDParameter, errorCode);
        }
    
        public virtual int usp_Service_Insert(string imageName, string metaTittle, string metaDescription, string serviceTitle, string convertedServiceTitle, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string serviceTitleEn, string descriptionEn, string contentEn, string tagEn, Nullable<int> serviceCategoryID, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var serviceTitleParameter = serviceTitle != null ?
                new ObjectParameter("ServiceTitle", serviceTitle) :
                new ObjectParameter("ServiceTitle", typeof(string));
    
            var convertedServiceTitleParameter = convertedServiceTitle != null ?
                new ObjectParameter("ConvertedServiceTitle", convertedServiceTitle) :
                new ObjectParameter("ConvertedServiceTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var serviceTitleEnParameter = serviceTitleEn != null ?
                new ObjectParameter("ServiceTitleEn", serviceTitleEn) :
                new ObjectParameter("ServiceTitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Service_Insert", imageNameParameter, metaTittleParameter, metaDescriptionParameter, serviceTitleParameter, convertedServiceTitleParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, serviceTitleEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, serviceCategoryIDParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, isAvailableParameter, priorityParameter, outImageName, errorCode);
        }
    
        public virtual int usp_Service_QuickUpdate(Nullable<int> serviceID, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Service_QuickUpdate", serviceIDParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Service_SelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, string keyword, string serviceTitle, string description, Nullable<int> serviceCategoryID, string tag, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var serviceTitleParameter = serviceTitle != null ?
                new ObjectParameter("ServiceTitle", serviceTitle) :
                new ObjectParameter("ServiceTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Service_SelectAll", startRowIndexParameter, endRowIndexParameter, keywordParameter, serviceTitleParameter, descriptionParameter, serviceCategoryIDParameter, tagParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, fromDateParameter, toDateParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Service_SelectOne_Result> usp_Service_SelectOne(Nullable<int> serviceID, ObjectParameter errorCode)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Service_SelectOne_Result>("usp_Service_SelectOne", serviceIDParameter, errorCode);
        }
    
        public virtual int usp_Service_Update(Nullable<int> serviceID, string metaTittle, string metaDescription, string serviceTitle, string convertedServiceTitle, string imageName, string description, string content, string tag, string metaTittleEn, string metaDescriptionEn, string serviceTitleEn, string descriptionEn, string contentEn, string tagEn, Nullable<int> serviceCategoryID, Nullable<bool> isShowOnHomePage, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var metaTittleParameter = metaTittle != null ?
                new ObjectParameter("MetaTittle", metaTittle) :
                new ObjectParameter("MetaTittle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var serviceTitleParameter = serviceTitle != null ?
                new ObjectParameter("ServiceTitle", serviceTitle) :
                new ObjectParameter("ServiceTitle", typeof(string));
    
            var convertedServiceTitleParameter = convertedServiceTitle != null ?
                new ObjectParameter("ConvertedServiceTitle", convertedServiceTitle) :
                new ObjectParameter("ConvertedServiceTitle", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var metaTittleEnParameter = metaTittleEn != null ?
                new ObjectParameter("MetaTittleEn", metaTittleEn) :
                new ObjectParameter("MetaTittleEn", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var serviceTitleEnParameter = serviceTitleEn != null ?
                new ObjectParameter("ServiceTitleEn", serviceTitleEn) :
                new ObjectParameter("ServiceTitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var tagEnParameter = tagEn != null ?
                new ObjectParameter("TagEn", tagEn) :
                new ObjectParameter("TagEn", typeof(string));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Service_Update", serviceIDParameter, metaTittleParameter, metaDescriptionParameter, serviceTitleParameter, convertedServiceTitleParameter, imageNameParameter, descriptionParameter, contentParameter, tagParameter, metaTittleEnParameter, metaDescriptionEnParameter, serviceTitleEnParameter, descriptionEnParameter, contentEnParameter, tagEnParameter, serviceCategoryIDParameter, isShowOnHomePageParameter, isHotParameter, isNewParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_ServiceCategory_Delete(Nullable<int> serviceCategoryID, ObjectParameter errorCode)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ServiceCategory_Delete", serviceCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ServiceCategory_DownOrder(Nullable<int> serviceCategoryID, ObjectParameter errorCode)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ServiceCategory_DownOrder", serviceCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ServiceCategory_Insert(string serviceCategoryName, string serviceCategoryNameEn, string convertedServiceCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var serviceCategoryNameParameter = serviceCategoryName != null ?
                new ObjectParameter("ServiceCategoryName", serviceCategoryName) :
                new ObjectParameter("ServiceCategoryName", typeof(string));
    
            var serviceCategoryNameEnParameter = serviceCategoryNameEn != null ?
                new ObjectParameter("ServiceCategoryNameEn", serviceCategoryNameEn) :
                new ObjectParameter("ServiceCategoryNameEn", typeof(string));
    
            var convertedServiceCategoryNameParameter = convertedServiceCategoryName != null ?
                new ObjectParameter("ConvertedServiceCategoryName", convertedServiceCategoryName) :
                new ObjectParameter("ConvertedServiceCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ServiceCategory_Insert", serviceCategoryNameParameter, serviceCategoryNameEnParameter, convertedServiceCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, outImageName, errorCode);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_ServiceCategory_IsChildrenExist(Nullable<int> serviceCategoryID, ObjectParameter errorCode)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_ServiceCategory_IsChildrenExist", serviceCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ServiceCategory_QuickUpdate(Nullable<int> serviceCategoryID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ServiceCategory_QuickUpdate", serviceCategoryIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ServiceCategory_SelectAll_Result> usp_ServiceCategory_SelectAll(ObjectParameter errorCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceCategory_SelectAll_Result>("usp_ServiceCategory_SelectAll", errorCode);
        }
    
        public virtual ObjectResult<usp_ServiceCategory_SelectOne_Result> usp_ServiceCategory_SelectOne(Nullable<int> serviceCategoryID, ObjectParameter errorCode)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceCategory_SelectOne_Result>("usp_ServiceCategory_SelectOne", serviceCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ServiceCategory_Update(Nullable<int> serviceCategoryID, string serviceCategoryName, string serviceCategoryNameEn, string convertedServiceCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, string imageName, Nullable<int> parentID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceCategoryNameParameter = serviceCategoryName != null ?
                new ObjectParameter("ServiceCategoryName", serviceCategoryName) :
                new ObjectParameter("ServiceCategoryName", typeof(string));
    
            var serviceCategoryNameEnParameter = serviceCategoryNameEn != null ?
                new ObjectParameter("ServiceCategoryNameEn", serviceCategoryNameEn) :
                new ObjectParameter("ServiceCategoryNameEn", typeof(string));
    
            var convertedServiceCategoryNameParameter = convertedServiceCategoryName != null ?
                new ObjectParameter("ConvertedServiceCategoryName", convertedServiceCategoryName) :
                new ObjectParameter("ConvertedServiceCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ServiceCategory_Update", serviceCategoryIDParameter, serviceCategoryNameParameter, serviceCategoryNameEnParameter, convertedServiceCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, imageNameParameter, parentIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_ServiceCategory_UpOrder(Nullable<int> serviceCategoryID, ObjectParameter errorCode)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ServiceCategory_UpOrder", serviceCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ServiceCategoryForEdit_SelectAll_Result> usp_ServiceCategoryForEdit_SelectAll(Nullable<int> serviceCategoryID, ObjectParameter errorCode)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceCategoryForEdit_SelectAll_Result>("usp_ServiceCategoryForEdit_SelectAll", serviceCategoryIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ServiceCategoryHierarchyToTop_SelectAll_Result> usp_ServiceCategoryHierarchyToTop_SelectAll(Nullable<int> currentServiceCategoryID, ObjectParameter errorCode)
        {
            var currentServiceCategoryIDParameter = currentServiceCategoryID.HasValue ?
                new ObjectParameter("CurrentServiceCategoryID", currentServiceCategoryID) :
                new ObjectParameter("CurrentServiceCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceCategoryHierarchyToTop_SelectAll_Result>("usp_ServiceCategoryHierarchyToTop_SelectAll", currentServiceCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ServiceCategoryImage_Delete(Nullable<int> serviceCategoryID, ObjectParameter errorCode)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ServiceCategoryImage_Delete", serviceCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_ServiceImage_Delete(Nullable<int> serviceID, ObjectParameter errorCode)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ServiceImage_Delete", serviceIDParameter, errorCode);
        }
    
        public virtual int usp_Shipping_Delete(Nullable<int> shippingID, ObjectParameter errorCode)
        {
            var shippingIDParameter = shippingID.HasValue ?
                new ObjectParameter("ShippingID", shippingID) :
                new ObjectParameter("ShippingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Shipping_Delete", shippingIDParameter, errorCode);
        }
    
        public virtual int usp_Shipping_Insert(Nullable<decimal> shippingPrice, ObjectParameter errorCode)
        {
            var shippingPriceParameter = shippingPrice.HasValue ?
                new ObjectParameter("ShippingPrice", shippingPrice) :
                new ObjectParameter("ShippingPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Shipping_Insert", shippingPriceParameter, errorCode);
        }
    
        public virtual int usp_Shipping_SelectAll(Nullable<int> shippingID, Nullable<decimal> shippingPrice, ObjectParameter errorCode)
        {
            var shippingIDParameter = shippingID.HasValue ?
                new ObjectParameter("ShippingID", shippingID) :
                new ObjectParameter("ShippingID", typeof(int));
    
            var shippingPriceParameter = shippingPrice.HasValue ?
                new ObjectParameter("ShippingPrice", shippingPrice) :
                new ObjectParameter("ShippingPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Shipping_SelectAll", shippingIDParameter, shippingPriceParameter, errorCode);
        }
    
        public virtual int usp_Shipping_SelectOne(Nullable<int> shippingID, ObjectParameter errorCode)
        {
            var shippingIDParameter = shippingID.HasValue ?
                new ObjectParameter("ShippingID", shippingID) :
                new ObjectParameter("ShippingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Shipping_SelectOne", shippingIDParameter, errorCode);
        }
    
        public virtual int usp_Shipping_Update(Nullable<int> shippingID, string shippingPrice, ObjectParameter errorCode)
        {
            var shippingIDParameter = shippingID.HasValue ?
                new ObjectParameter("ShippingID", shippingID) :
                new ObjectParameter("ShippingID", typeof(int));
    
            var shippingPriceParameter = shippingPrice != null ?
                new ObjectParameter("ShippingPrice", shippingPrice) :
                new ObjectParameter("ShippingPrice", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Shipping_Update", shippingIDParameter, shippingPriceParameter, errorCode);
        }
    
        public virtual int usp_ShippingStatus_Delete(Nullable<int> shippingStatusID, ObjectParameter errorCode)
        {
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ShippingStatus_Delete", shippingStatusIDParameter, errorCode);
        }
    
        public virtual int usp_ShippingStatus_Insert(string shippingStatusName, ObjectParameter errorCode)
        {
            var shippingStatusNameParameter = shippingStatusName != null ?
                new ObjectParameter("ShippingStatusName", shippingStatusName) :
                new ObjectParameter("ShippingStatusName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ShippingStatus_Insert", shippingStatusNameParameter, errorCode);
        }
    
        public virtual int usp_ShippingStatus_SelectAll(Nullable<int> shippingStatusID, string shippingStatusName, ObjectParameter errorCode)
        {
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var shippingStatusNameParameter = shippingStatusName != null ?
                new ObjectParameter("ShippingStatusName", shippingStatusName) :
                new ObjectParameter("ShippingStatusName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ShippingStatus_SelectAll", shippingStatusIDParameter, shippingStatusNameParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ShippingStatus_SelectOne_Result> usp_ShippingStatus_SelectOne(Nullable<int> shippingStatusID, ObjectParameter errorCode)
        {
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ShippingStatus_SelectOne_Result>("usp_ShippingStatus_SelectOne", shippingStatusIDParameter, errorCode);
        }
    
        public virtual int usp_ShippingStatus_Update(Nullable<int> shippingStatusID, string shippingStatusName, ObjectParameter errorCode)
        {
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var shippingStatusNameParameter = shippingStatusName != null ?
                new ObjectParameter("ShippingStatusName", shippingStatusName) :
                new ObjectParameter("ShippingStatusName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ShippingStatus_Update", shippingStatusIDParameter, shippingStatusNameParameter, errorCode);
        }
    
        public virtual int usp_User_SelectAll(string userName, string email, string role, ObjectParameter errorCode)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_SelectAll", userNameParameter, emailParameter, roleParameter, errorCode);
        }
    
        public virtual int usp_UserProfile_Delete(Nullable<System.Guid> userID, ObjectParameter errorCode)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserProfile_Delete", userIDParameter, errorCode);
        }
    
        public virtual int usp_UserProfile_Insert(Nullable<System.Guid> userID, string companyName, string fullName, string address, string homePhone, string cellPhone, string fax, string avatarImage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var avatarImageParameter = avatarImage != null ?
                new ObjectParameter("AvatarImage", avatarImage) :
                new ObjectParameter("AvatarImage", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserProfile_Insert", userIDParameter, companyNameParameter, fullNameParameter, addressParameter, homePhoneParameter, cellPhoneParameter, faxParameter, avatarImageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_UserProfile_SelectAll(string keyword, string userName, string email, string role, string companyName, string fullName, string address, string homePhone, string cellPhone, string fax, ObjectParameter errorCode)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserProfile_SelectAll", keywordParameter, userNameParameter, emailParameter, roleParameter, companyNameParameter, fullNameParameter, addressParameter, homePhoneParameter, cellPhoneParameter, faxParameter, errorCode);
        }
    
        public virtual int usp_UserProfile_SelectAll_AddressBook(string userName, string email, string roleName, string company, string firstName, string lastName, string address1, string address2, string homePhone, string cellPhone, string fax, Nullable<int> countryID, Nullable<int> provinceID, Nullable<int> districtID, Nullable<bool> isPrimary, Nullable<bool> isPrimaryBilling, Nullable<bool> isPrimaryShipping, ObjectParameter errorCode)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isPrimaryBillingParameter = isPrimaryBilling.HasValue ?
                new ObjectParameter("IsPrimaryBilling", isPrimaryBilling) :
                new ObjectParameter("IsPrimaryBilling", typeof(bool));
    
            var isPrimaryShippingParameter = isPrimaryShipping.HasValue ?
                new ObjectParameter("IsPrimaryShipping", isPrimaryShipping) :
                new ObjectParameter("IsPrimaryShipping", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserProfile_SelectAll_AddressBook", userNameParameter, emailParameter, roleNameParameter, companyParameter, firstNameParameter, lastNameParameter, address1Parameter, address2Parameter, homePhoneParameter, cellPhoneParameter, faxParameter, countryIDParameter, provinceIDParameter, districtIDParameter, isPrimaryParameter, isPrimaryBillingParameter, isPrimaryShippingParameter, errorCode);
        }
    
        public virtual int usp_UserProfile_SelectAll1(string keyword, string userName, string email, string role, string companyName, string fullName, string address, string homePhone, string cellPhone, string fax, ObjectParameter errorCode)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserProfile_SelectAll1", keywordParameter, userNameParameter, emailParameter, roleParameter, companyNameParameter, fullNameParameter, addressParameter, homePhoneParameter, cellPhoneParameter, faxParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_UserProfile_SelectOne_Result> usp_UserProfile_SelectOne(Nullable<System.Guid> userID, ObjectParameter errorCode)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserProfile_SelectOne_Result>("usp_UserProfile_SelectOne", userIDParameter, errorCode);
        }
    
        public virtual int usp_UserProfile_Update(Nullable<System.Guid> userID, string companyName, string fullName, string address, string homePhone, string cellPhone, string fax, string avatarImage, Nullable<bool> isAvailable, ObjectParameter errorCode)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var avatarImageParameter = avatarImage != null ?
                new ObjectParameter("AvatarImage", avatarImage) :
                new ObjectParameter("AvatarImage", typeof(string));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserProfile_Update", userIDParameter, companyNameParameter, fullNameParameter, addressParameter, homePhoneParameter, cellPhoneParameter, faxParameter, avatarImageParameter, isAvailableParameter, errorCode);
        }
    
        public virtual int usp_UserProfileImage_Delete(Nullable<System.Guid> userID, ObjectParameter errorCode)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserProfileImage_Delete", userIDParameter, errorCode);
        }
    
        public virtual int usp_Video_Delete(Nullable<int> videoID, ObjectParameter errorCode)
        {
            var videoIDParameter = videoID.HasValue ?
                new ObjectParameter("VideoID", videoID) :
                new ObjectParameter("VideoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Video_Delete", videoIDParameter, errorCode);
        }
    
        public virtual int usp_Video_Insert(string title, string description, string titleEn, string descriptionEn, string convertedTitle, string imagePath, string videoPath, string gLobalEmbedScript, Nullable<int> videoCategoryID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outVideoID, ObjectParameter errorCode)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var titleEnParameter = titleEn != null ?
                new ObjectParameter("TitleEn", titleEn) :
                new ObjectParameter("TitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var convertedTitleParameter = convertedTitle != null ?
                new ObjectParameter("ConvertedTitle", convertedTitle) :
                new ObjectParameter("ConvertedTitle", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var videoPathParameter = videoPath != null ?
                new ObjectParameter("VideoPath", videoPath) :
                new ObjectParameter("VideoPath", typeof(string));
    
            var gLobalEmbedScriptParameter = gLobalEmbedScript != null ?
                new ObjectParameter("GLobalEmbedScript", gLobalEmbedScript) :
                new ObjectParameter("GLobalEmbedScript", typeof(string));
    
            var videoCategoryIDParameter = videoCategoryID.HasValue ?
                new ObjectParameter("VideoCategoryID", videoCategoryID) :
                new ObjectParameter("VideoCategoryID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Video_Insert", titleParameter, descriptionParameter, titleEnParameter, descriptionEnParameter, convertedTitleParameter, imagePathParameter, videoPathParameter, gLobalEmbedScriptParameter, videoCategoryIDParameter, isAvailableParameter, priorityParameter, outVideoID, errorCode);
        }
    
        public virtual int usp_Video_QuickUpdate(Nullable<int> videoID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var videoIDParameter = videoID.HasValue ?
                new ObjectParameter("VideoID", videoID) :
                new ObjectParameter("VideoID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Video_QuickUpdate", videoIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_Video_SelectAll(string title, string description, Nullable<int> videoCategoryID, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var videoCategoryIDParameter = videoCategoryID.HasValue ?
                new ObjectParameter("VideoCategoryID", videoCategoryID) :
                new ObjectParameter("VideoCategoryID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Video_SelectAll", titleParameter, descriptionParameter, videoCategoryIDParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual int usp_Video_SelectMaxID(ObjectParameter videoID, ObjectParameter errorCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Video_SelectMaxID", videoID, errorCode);
        }
    
        public virtual ObjectResult<usp_Video_SelectOne_Result> usp_Video_SelectOne(Nullable<int> videoID, ObjectParameter errorCode)
        {
            var videoIDParameter = videoID.HasValue ?
                new ObjectParameter("VideoID", videoID) :
                new ObjectParameter("VideoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Video_SelectOne_Result>("usp_Video_SelectOne", videoIDParameter, errorCode);
        }
    
        public virtual int usp_Video_Update(Nullable<int> videoID, string title, string description, string titleEn, string descriptionEn, string convertedTitle, string imagePath, string videoPath, string gLobalEmbedScript, Nullable<int> videoCategoryID, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var videoIDParameter = videoID.HasValue ?
                new ObjectParameter("VideoID", videoID) :
                new ObjectParameter("VideoID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var titleEnParameter = titleEn != null ?
                new ObjectParameter("TitleEn", titleEn) :
                new ObjectParameter("TitleEn", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var convertedTitleParameter = convertedTitle != null ?
                new ObjectParameter("ConvertedTitle", convertedTitle) :
                new ObjectParameter("ConvertedTitle", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var videoPathParameter = videoPath != null ?
                new ObjectParameter("VideoPath", videoPath) :
                new ObjectParameter("VideoPath", typeof(string));
    
            var gLobalEmbedScriptParameter = gLobalEmbedScript != null ?
                new ObjectParameter("GLobalEmbedScript", gLobalEmbedScript) :
                new ObjectParameter("GLobalEmbedScript", typeof(string));
    
            var videoCategoryIDParameter = videoCategoryID.HasValue ?
                new ObjectParameter("VideoCategoryID", videoCategoryID) :
                new ObjectParameter("VideoCategoryID", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Video_Update", videoIDParameter, titleParameter, descriptionParameter, titleEnParameter, descriptionEnParameter, convertedTitleParameter, imagePathParameter, videoPathParameter, gLobalEmbedScriptParameter, videoCategoryIDParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_VideoCategory_Delete(Nullable<int> videoCategoryID, ObjectParameter errorCode)
        {
            var videoCategoryIDParameter = videoCategoryID.HasValue ?
                new ObjectParameter("VideoCategoryID", videoCategoryID) :
                new ObjectParameter("VideoCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VideoCategory_Delete", videoCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_VideoCategory_Insert(string imageName, string videoCategoryName, string videoCategoryNameEn, string convertedVideoCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter outImageName, ObjectParameter errorCode)
        {
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var videoCategoryNameParameter = videoCategoryName != null ?
                new ObjectParameter("VideoCategoryName", videoCategoryName) :
                new ObjectParameter("VideoCategoryName", typeof(string));
    
            var videoCategoryNameEnParameter = videoCategoryNameEn != null ?
                new ObjectParameter("VideoCategoryNameEn", videoCategoryNameEn) :
                new ObjectParameter("VideoCategoryNameEn", typeof(string));
    
            var convertedVideoCategoryNameParameter = convertedVideoCategoryName != null ?
                new ObjectParameter("ConvertedVideoCategoryName", convertedVideoCategoryName) :
                new ObjectParameter("ConvertedVideoCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VideoCategory_Insert", imageNameParameter, videoCategoryNameParameter, videoCategoryNameEnParameter, convertedVideoCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, outImageName, errorCode);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_VideoCategory_IsChildrenExist(Nullable<int> videoCategoryID, ObjectParameter errorCode)
        {
            var videoCategoryIDParameter = videoCategoryID.HasValue ?
                new ObjectParameter("VideoCategoryID", videoCategoryID) :
                new ObjectParameter("VideoCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_VideoCategory_IsChildrenExist", videoCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_VideoCategory_QuickUpdate(Nullable<int> videoCategoryID, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var videoCategoryIDParameter = videoCategoryID.HasValue ?
                new ObjectParameter("VideoCategoryID", videoCategoryID) :
                new ObjectParameter("VideoCategoryID", typeof(int));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VideoCategory_QuickUpdate", videoCategoryIDParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_VideoCategory_SelectAll(Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VideoCategory_SelectAll", isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_VideoCategory_SelectOne_Result> usp_VideoCategory_SelectOne(Nullable<int> videoCategoryID, ObjectParameter errorCode)
        {
            var videoCategoryIDParameter = videoCategoryID.HasValue ?
                new ObjectParameter("VideoCategoryID", videoCategoryID) :
                new ObjectParameter("VideoCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VideoCategory_SelectOne_Result>("usp_VideoCategory_SelectOne", videoCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_VideoCategory_Update(Nullable<int> videoCategoryID, string imageName, string videoCategoryName, string videoCategoryNameEn, string convertedVideoCategoryName, string description, string descriptionEn, string content, string contentEn, string metaTitle, string metaTitleEn, string metaDescription, string metaDescriptionEn, Nullable<bool> isShowOnMenu, Nullable<bool> isShowOnHomePage, Nullable<bool> isAvailable, Nullable<int> priority, ObjectParameter errorCode)
        {
            var videoCategoryIDParameter = videoCategoryID.HasValue ?
                new ObjectParameter("VideoCategoryID", videoCategoryID) :
                new ObjectParameter("VideoCategoryID", typeof(int));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var videoCategoryNameParameter = videoCategoryName != null ?
                new ObjectParameter("VideoCategoryName", videoCategoryName) :
                new ObjectParameter("VideoCategoryName", typeof(string));
    
            var videoCategoryNameEnParameter = videoCategoryNameEn != null ?
                new ObjectParameter("VideoCategoryNameEn", videoCategoryNameEn) :
                new ObjectParameter("VideoCategoryNameEn", typeof(string));
    
            var convertedVideoCategoryNameParameter = convertedVideoCategoryName != null ?
                new ObjectParameter("ConvertedVideoCategoryName", convertedVideoCategoryName) :
                new ObjectParameter("ConvertedVideoCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionEnParameter = descriptionEn != null ?
                new ObjectParameter("DescriptionEn", descriptionEn) :
                new ObjectParameter("DescriptionEn", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentEnParameter = contentEn != null ?
                new ObjectParameter("ContentEn", contentEn) :
                new ObjectParameter("ContentEn", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaTitleEnParameter = metaTitleEn != null ?
                new ObjectParameter("MetaTitleEn", metaTitleEn) :
                new ObjectParameter("MetaTitleEn", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var metaDescriptionEnParameter = metaDescriptionEn != null ?
                new ObjectParameter("MetaDescriptionEn", metaDescriptionEn) :
                new ObjectParameter("MetaDescriptionEn", typeof(string));
    
            var isShowOnMenuParameter = isShowOnMenu.HasValue ?
                new ObjectParameter("IsShowOnMenu", isShowOnMenu) :
                new ObjectParameter("IsShowOnMenu", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VideoCategory_Update", videoCategoryIDParameter, imageNameParameter, videoCategoryNameParameter, videoCategoryNameEnParameter, convertedVideoCategoryNameParameter, descriptionParameter, descriptionEnParameter, contentParameter, contentEnParameter, metaTitleParameter, metaTitleEnParameter, metaDescriptionParameter, metaDescriptionEnParameter, isShowOnMenuParameter, isShowOnHomePageParameter, isAvailableParameter, priorityParameter, errorCode);
        }
    
        public virtual int usp_VideoCategoryImage_Delete(Nullable<int> videoCategoryID, ObjectParameter errorCode)
        {
            var videoCategoryIDParameter = videoCategoryID.HasValue ?
                new ObjectParameter("VideoCategoryID", videoCategoryID) :
                new ObjectParameter("VideoCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VideoCategoryImage_Delete", videoCategoryIDParameter, errorCode);
        }
    
        public virtual int usp_VideoImage_Delete(Nullable<int> videoID, ObjectParameter errorCode)
        {
            var videoIDParameter = videoID.HasValue ?
                new ObjectParameter("VideoID", videoID) :
                new ObjectParameter("VideoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VideoImage_Delete", videoIDParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_Visitor_Edit_Result> usp_Visitor_Edit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Visitor_Edit_Result>("usp_Visitor_Edit");
        }
    
        public virtual int usp_WishList_Delete(Nullable<int> productID, string userName, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WishList_Delete", productIDParameter, userNameParameter, errorCode);
        }
    
        public virtual int usp_WishList_Insert(Nullable<int> productID, string userName, Nullable<int> quantity, Nullable<decimal> price, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WishList_Insert", productIDParameter, userNameParameter, quantityParameter, priceParameter, errorCode);
        }
    
        public virtual int usp_WishList_Insert1(Nullable<int> productID, string userName, Nullable<int> quantity, Nullable<decimal> price, string imageName, string productName, string productNameEn, string productCode, Nullable<int> productOptionCategoryID, string productOptionCategoryName, Nullable<int> productLengthID, string productLengthName, Nullable<int> productSizeColorID, Nullable<int> quantityList, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productNameEnParameter = productNameEn != null ?
                new ObjectParameter("ProductNameEn", productNameEn) :
                new ObjectParameter("ProductNameEn", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            var productOptionCategoryNameParameter = productOptionCategoryName != null ?
                new ObjectParameter("ProductOptionCategoryName", productOptionCategoryName) :
                new ObjectParameter("ProductOptionCategoryName", typeof(string));
    
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            var productLengthNameParameter = productLengthName != null ?
                new ObjectParameter("ProductLengthName", productLengthName) :
                new ObjectParameter("ProductLengthName", typeof(string));
    
            var productSizeColorIDParameter = productSizeColorID.HasValue ?
                new ObjectParameter("ProductSizeColorID", productSizeColorID) :
                new ObjectParameter("ProductSizeColorID", typeof(int));
    
            var quantityListParameter = quantityList.HasValue ?
                new ObjectParameter("QuantityList", quantityList) :
                new ObjectParameter("QuantityList", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WishList_Insert1", productIDParameter, userNameParameter, quantityParameter, priceParameter, imageNameParameter, productNameParameter, productNameEnParameter, productCodeParameter, productOptionCategoryIDParameter, productOptionCategoryNameParameter, productLengthIDParameter, productLengthNameParameter, productSizeColorIDParameter, quantityListParameter, errorCode);
        }
    
        public virtual int usp_WishList_SelectAll(string keyword, Nullable<int> productID, string userName, Nullable<int> quantity, Nullable<decimal> price, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter errorCode)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WishList_SelectAll", keywordParameter, productIDParameter, userNameParameter, quantityParameter, priceParameter, fromDateParameter, toDateParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_WishList_SelectOne_Result> usp_WishList_SelectOne(Nullable<int> productID, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WishList_SelectOne_Result>("usp_WishList_SelectOne", productIDParameter, errorCode);
        }
    
        public virtual int usp_WishList_Update(Nullable<int> productID, string userName, Nullable<int> quantity, Nullable<decimal> price, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WishList_Update", productIDParameter, userNameParameter, quantityParameter, priceParameter, errorCode);
        }
    
        public virtual int usp_WishList_Update1(Nullable<int> productID, string userName, Nullable<int> quantity, Nullable<decimal> price, string imageName, string productName, string productNameEn, string productCode, Nullable<int> productOptionCategoryID, string productOptionCategoryName, Nullable<int> productLengthID, string productLengthName, Nullable<int> productSizeColorID, Nullable<int> quantityList, ObjectParameter errorCode)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productNameEnParameter = productNameEn != null ?
                new ObjectParameter("ProductNameEn", productNameEn) :
                new ObjectParameter("ProductNameEn", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var productOptionCategoryIDParameter = productOptionCategoryID.HasValue ?
                new ObjectParameter("ProductOptionCategoryID", productOptionCategoryID) :
                new ObjectParameter("ProductOptionCategoryID", typeof(int));
    
            var productOptionCategoryNameParameter = productOptionCategoryName != null ?
                new ObjectParameter("ProductOptionCategoryName", productOptionCategoryName) :
                new ObjectParameter("ProductOptionCategoryName", typeof(string));
    
            var productLengthIDParameter = productLengthID.HasValue ?
                new ObjectParameter("ProductLengthID", productLengthID) :
                new ObjectParameter("ProductLengthID", typeof(int));
    
            var productLengthNameParameter = productLengthName != null ?
                new ObjectParameter("ProductLengthName", productLengthName) :
                new ObjectParameter("ProductLengthName", typeof(string));
    
            var productSizeColorIDParameter = productSizeColorID.HasValue ?
                new ObjectParameter("ProductSizeColorID", productSizeColorID) :
                new ObjectParameter("ProductSizeColorID", typeof(int));
    
            var quantityListParameter = quantityList.HasValue ?
                new ObjectParameter("QuantityList", quantityList) :
                new ObjectParameter("QuantityList", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WishList_Update1", productIDParameter, userNameParameter, quantityParameter, priceParameter, imageNameParameter, productNameParameter, productNameEnParameter, productCodeParameter, productOptionCategoryIDParameter, productOptionCategoryNameParameter, productLengthIDParameter, productLengthNameParameter, productSizeColorIDParameter, quantityListParameter, errorCode);
        }
    
        public virtual ObjectResult<AdsBanner> AdsBannerSelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, Nullable<int> adsCategoryID, string companyName, string website, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var adsCategoryIDParameter = adsCategoryID.HasValue ?
                new ObjectParameter("AdsCategoryID", adsCategoryID) :
                new ObjectParameter("AdsCategoryID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdsBanner>("AdsBannerSelectAll", startRowIndexParameter, endRowIndexParameter, adsCategoryIDParameter, companyNameParameter, websiteParameter, fromDateParameter, toDateParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<AdsBanner> AdsBannerSelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, Nullable<int> adsCategoryID, string companyName, string website, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAvailable, Nullable<bool> priority, Nullable<bool> sortByPriority, ObjectParameter errorCode, MergeOption mergeOption)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var adsCategoryIDParameter = adsCategoryID.HasValue ?
                new ObjectParameter("AdsCategoryID", adsCategoryID) :
                new ObjectParameter("AdsCategoryID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdsBanner>("AdsBannerSelectAll", mergeOption, startRowIndexParameter, endRowIndexParameter, adsCategoryIDParameter, companyNameParameter, websiteParameter, fromDateParameter, toDateParameter, isAvailableParameter, priorityParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<Product> ProductSelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, string keyword, string productName, string description, Nullable<decimal> priceFrom, Nullable<decimal> priceTo, Nullable<int> categoryID, Nullable<int> manufacturerID, Nullable<int> originID, string tag, Nullable<bool> inStock, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isBestSeller, Nullable<bool> isSaleOff, Nullable<bool> isShowOnHomePage, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> priority, Nullable<bool> isAvailable, Nullable<bool> sortByPriority, ObjectParameter errorCode)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priceFromParameter = priceFrom.HasValue ?
                new ObjectParameter("PriceFrom", priceFrom) :
                new ObjectParameter("PriceFrom", typeof(decimal));
    
            var priceToParameter = priceTo.HasValue ?
                new ObjectParameter("PriceTo", priceTo) :
                new ObjectParameter("PriceTo", typeof(decimal));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var originIDParameter = originID.HasValue ?
                new ObjectParameter("OriginID", originID) :
                new ObjectParameter("OriginID", typeof(int));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var inStockParameter = inStock.HasValue ?
                new ObjectParameter("InStock", inStock) :
                new ObjectParameter("InStock", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isBestSellerParameter = isBestSeller.HasValue ?
                new ObjectParameter("IsBestSeller", isBestSeller) :
                new ObjectParameter("IsBestSeller", typeof(bool));
    
            var isSaleOffParameter = isSaleOff.HasValue ?
                new ObjectParameter("IsSaleOff", isSaleOff) :
                new ObjectParameter("IsSaleOff", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("ProductSelectAll", startRowIndexParameter, endRowIndexParameter, keywordParameter, productNameParameter, descriptionParameter, priceFromParameter, priceToParameter, categoryIDParameter, manufacturerIDParameter, originIDParameter, tagParameter, inStockParameter, isHotParameter, isNewParameter, isBestSellerParameter, isSaleOffParameter, isShowOnHomePageParameter, fromDateParameter, toDateParameter, priorityParameter, isAvailableParameter, sortByPriorityParameter, errorCode);
        }
    
        public virtual ObjectResult<Product> ProductSelectAll(Nullable<int> startRowIndex, Nullable<int> endRowIndex, string keyword, string productName, string description, Nullable<decimal> priceFrom, Nullable<decimal> priceTo, Nullable<int> categoryID, Nullable<int> manufacturerID, Nullable<int> originID, string tag, Nullable<bool> inStock, Nullable<bool> isHot, Nullable<bool> isNew, Nullable<bool> isBestSeller, Nullable<bool> isSaleOff, Nullable<bool> isShowOnHomePage, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> priority, Nullable<bool> isAvailable, Nullable<bool> sortByPriority, ObjectParameter errorCode, MergeOption mergeOption)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var endRowIndexParameter = endRowIndex.HasValue ?
                new ObjectParameter("EndRowIndex", endRowIndex) :
                new ObjectParameter("EndRowIndex", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priceFromParameter = priceFrom.HasValue ?
                new ObjectParameter("PriceFrom", priceFrom) :
                new ObjectParameter("PriceFrom", typeof(decimal));
    
            var priceToParameter = priceTo.HasValue ?
                new ObjectParameter("PriceTo", priceTo) :
                new ObjectParameter("PriceTo", typeof(decimal));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var originIDParameter = originID.HasValue ?
                new ObjectParameter("OriginID", originID) :
                new ObjectParameter("OriginID", typeof(int));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var inStockParameter = inStock.HasValue ?
                new ObjectParameter("InStock", inStock) :
                new ObjectParameter("InStock", typeof(bool));
    
            var isHotParameter = isHot.HasValue ?
                new ObjectParameter("IsHot", isHot) :
                new ObjectParameter("IsHot", typeof(bool));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            var isBestSellerParameter = isBestSeller.HasValue ?
                new ObjectParameter("IsBestSeller", isBestSeller) :
                new ObjectParameter("IsBestSeller", typeof(bool));
    
            var isSaleOffParameter = isSaleOff.HasValue ?
                new ObjectParameter("IsSaleOff", isSaleOff) :
                new ObjectParameter("IsSaleOff", typeof(bool));
    
            var isShowOnHomePageParameter = isShowOnHomePage.HasValue ?
                new ObjectParameter("IsShowOnHomePage", isShowOnHomePage) :
                new ObjectParameter("IsShowOnHomePage", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(bool));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var sortByPriorityParameter = sortByPriority.HasValue ?
                new ObjectParameter("SortByPriority", sortByPriority) :
                new ObjectParameter("SortByPriority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("ProductSelectAll", mergeOption, startRowIndexParameter, endRowIndexParameter, keywordParameter, productNameParameter, descriptionParameter, priceFromParameter, priceToParameter, categoryIDParameter, manufacturerIDParameter, originIDParameter, tagParameter, inStockParameter, isHotParameter, isNewParameter, isBestSellerParameter, isSaleOffParameter, isShowOnHomePageParameter, fromDateParameter, toDateParameter, priorityParameter, isAvailableParameter, sortByPriorityParameter, errorCode);
        }
    }
}
